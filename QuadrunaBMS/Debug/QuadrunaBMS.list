
QuadrunaBMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003950  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003c1c  08003c1c  00004c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003c2c  08003c2c  00004c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08003c30  08003c30  00004c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08003c34  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a8  24000010  08003c44  00005010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240000b8  08003c44  000050b8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000a2ec  00000000  00000000  0000503e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001887  00000000  00000000  0000f32a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000008e0  00000000  00000000  00010bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000069e  00000000  00000000  00011498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00031a0a  00000000  00000000  00011b36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b402  00000000  00000000  00043540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013ff84  00000000  00000000  0004e942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0018e8c6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002384  00000000  00000000  0018e90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000072  00000000  00000000  00190c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08003c04 	.word	0x08003c04

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08003c04 	.word	0x08003c04

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	uint8_t dataToSend = 2;
 8000312:	2302      	movs	r3, #2
 8000314:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 faa9 	bl	800086c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f813 	bl	8000344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031e:	f000 f8d7 	bl	80004d0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000322:	f000 f87d 	bl	8000420 <MX_SPI2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_SPI_Transmit(&hspi2, &dataToSend, 1, 100);
 8000326:	1df9      	adds	r1, r7, #7
 8000328:	2364      	movs	r3, #100	@ 0x64
 800032a:	2201      	movs	r2, #1
 800032c:	4804      	ldr	r0, [pc, #16]	@ (8000340 <main+0x34>)
 800032e:	f003 f965 	bl	80035fc <HAL_SPI_Transmit>
	  HAL_Delay(500);
 8000332:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000336:	f000 fb2b 	bl	8000990 <HAL_Delay>
	  HAL_SPI_Transmit(&hspi2, &dataToSend, 1, 100);
 800033a:	bf00      	nop
 800033c:	e7f3      	b.n	8000326 <main+0x1a>
 800033e:	bf00      	nop
 8000340:	2400002c 	.word	0x2400002c

08000344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b09c      	sub	sp, #112	@ 0x70
 8000348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800034e:	224c      	movs	r2, #76	@ 0x4c
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f003 fc29 	bl	8003baa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2220      	movs	r2, #32
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f003 fc23 	bl	8003baa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000364:	2002      	movs	r0, #2
 8000366:	f000 fddd 	bl	8000f24 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800036a:	2300      	movs	r3, #0
 800036c:	603b      	str	r3, [r7, #0]
 800036e:	4b2b      	ldr	r3, [pc, #172]	@ (800041c <SystemClock_Config+0xd8>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	4a2a      	ldr	r2, [pc, #168]	@ (800041c <SystemClock_Config+0xd8>)
 8000374:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000378:	6193      	str	r3, [r2, #24]
 800037a:	4b28      	ldr	r3, [pc, #160]	@ (800041c <SystemClock_Config+0xd8>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000382:	603b      	str	r3, [r7, #0]
 8000384:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000386:	bf00      	nop
 8000388:	4b24      	ldr	r3, [pc, #144]	@ (800041c <SystemClock_Config+0xd8>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000390:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000394:	d1f8      	bne.n	8000388 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000396:	2301      	movs	r3, #1
 8000398:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800039a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800039e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a0:	2302      	movs	r3, #2
 80003a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a4:	2302      	movs	r3, #2
 80003a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003a8:	2301      	movs	r3, #1
 80003aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 80003ac:	2340      	movs	r3, #64	@ 0x40
 80003ae:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80003b0:	2301      	movs	r3, #1
 80003b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80003b4:	2304      	movs	r3, #4
 80003b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003b8:	2302      	movs	r3, #2
 80003ba:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003bc:	230c      	movs	r3, #12
 80003be:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003c0:	2300      	movs	r3, #0
 80003c2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003cc:	4618      	mov	r0, r3
 80003ce:	f000 fde3 	bl	8000f98 <HAL_RCC_OscConfig>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80003d8:	f000 f8dc 	bl	8000594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003dc:	233f      	movs	r3, #63	@ 0x3f
 80003de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e0:	2303      	movs	r3, #3
 80003e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80003e8:	2308      	movs	r3, #8
 80003ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80003ec:	2340      	movs	r3, #64	@ 0x40
 80003ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80003f0:	2340      	movs	r3, #64	@ 0x40
 80003f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80003f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80003fa:	2340      	movs	r3, #64	@ 0x40
 80003fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2103      	movs	r1, #3
 8000402:	4618      	mov	r0, r3
 8000404:	f001 f9a2 	bl	800174c <HAL_RCC_ClockConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800040e:	f000 f8c1 	bl	8000594 <Error_Handler>
  }
}
 8000412:	bf00      	nop
 8000414:	3770      	adds	r7, #112	@ 0x70
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	58024800 	.word	0x58024800

08000420 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000424:	4b28      	ldr	r3, [pc, #160]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 8000426:	4a29      	ldr	r2, [pc, #164]	@ (80004cc <MX_SPI2_Init+0xac>)
 8000428:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800042a:	4b27      	ldr	r3, [pc, #156]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 800042c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000430:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000432:	4b25      	ldr	r3, [pc, #148]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000438:	4b23      	ldr	r3, [pc, #140]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 800043a:	2207      	movs	r2, #7
 800043c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800043e:	4b22      	ldr	r3, [pc, #136]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 8000440:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000444:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000446:	4b20      	ldr	r3, [pc, #128]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 8000448:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800044c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800044e:	4b1e      	ldr	r3, [pc, #120]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 8000450:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000454:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000456:	4b1c      	ldr	r3, [pc, #112]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 8000458:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800045c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800045e:	4b1a      	ldr	r3, [pc, #104]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 8000460:	2200      	movs	r2, #0
 8000462:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000464:	4b18      	ldr	r3, [pc, #96]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 8000466:	2200      	movs	r2, #0
 8000468:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800046a:	4b17      	ldr	r3, [pc, #92]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 800046c:	2200      	movs	r2, #0
 800046e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000470:	4b15      	ldr	r3, [pc, #84]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 8000472:	2200      	movs	r2, #0
 8000474:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000476:	4b14      	ldr	r3, [pc, #80]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 8000478:	2200      	movs	r2, #0
 800047a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800047c:	4b12      	ldr	r3, [pc, #72]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 800047e:	2200      	movs	r2, #0
 8000480:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000482:	4b11      	ldr	r3, [pc, #68]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 8000484:	2200      	movs	r2, #0
 8000486:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000488:	4b0f      	ldr	r3, [pc, #60]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 800048a:	2200      	movs	r2, #0
 800048c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800048e:	4b0e      	ldr	r3, [pc, #56]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 8000490:	2200      	movs	r2, #0
 8000492:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000494:	4b0c      	ldr	r3, [pc, #48]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 8000496:	2200      	movs	r2, #0
 8000498:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800049a:	4b0b      	ldr	r3, [pc, #44]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 800049c:	2200      	movs	r2, #0
 800049e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80004a0:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80004a6:	4b08      	ldr	r3, [pc, #32]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 80004a8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80004ac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80004ae:	4b06      	ldr	r3, [pc, #24]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80004b4:	4804      	ldr	r0, [pc, #16]	@ (80004c8 <MX_SPI2_Init+0xa8>)
 80004b6:	f002 ff7d 	bl	80033b4 <HAL_SPI_Init>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 80004c0:	f000 f868 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	2400002c 	.word	0x2400002c
 80004cc:	40003800 	.word	0x40003800

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	@ 0x28
 80004d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004e6:	4b29      	ldr	r3, [pc, #164]	@ (800058c <MX_GPIO_Init+0xbc>)
 80004e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004ec:	4a27      	ldr	r2, [pc, #156]	@ (800058c <MX_GPIO_Init+0xbc>)
 80004ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004f6:	4b25      	ldr	r3, [pc, #148]	@ (800058c <MX_GPIO_Init+0xbc>)
 80004f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000500:	613b      	str	r3, [r7, #16]
 8000502:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000504:	4b21      	ldr	r3, [pc, #132]	@ (800058c <MX_GPIO_Init+0xbc>)
 8000506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800050a:	4a20      	ldr	r2, [pc, #128]	@ (800058c <MX_GPIO_Init+0xbc>)
 800050c:	f043 0310 	orr.w	r3, r3, #16
 8000510:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000514:	4b1d      	ldr	r3, [pc, #116]	@ (800058c <MX_GPIO_Init+0xbc>)
 8000516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800051a:	f003 0310 	and.w	r3, r3, #16
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	4b1a      	ldr	r3, [pc, #104]	@ (800058c <MX_GPIO_Init+0xbc>)
 8000524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000528:	4a18      	ldr	r2, [pc, #96]	@ (800058c <MX_GPIO_Init+0xbc>)
 800052a:	f043 0302 	orr.w	r3, r3, #2
 800052e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000532:	4b16      	ldr	r3, [pc, #88]	@ (800058c <MX_GPIO_Init+0xbc>)
 8000534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000538:	f003 0302 	and.w	r3, r3, #2
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000540:	4b12      	ldr	r3, [pc, #72]	@ (800058c <MX_GPIO_Init+0xbc>)
 8000542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000546:	4a11      	ldr	r2, [pc, #68]	@ (800058c <MX_GPIO_Init+0xbc>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000550:	4b0e      	ldr	r3, [pc, #56]	@ (800058c <MX_GPIO_Init+0xbc>)
 8000552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2180      	movs	r1, #128	@ 0x80
 8000562:	480b      	ldr	r0, [pc, #44]	@ (8000590 <MX_GPIO_Init+0xc0>)
 8000564:	f000 fcc4 	bl	8000ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000568:	2380      	movs	r3, #128	@ 0x80
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056c:	2301      	movs	r3, #1
 800056e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	2300      	movs	r3, #0
 8000576:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	4619      	mov	r1, r3
 800057e:	4804      	ldr	r0, [pc, #16]	@ (8000590 <MX_GPIO_Init+0xc0>)
 8000580:	f000 fb0e 	bl	8000ba0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000584:	bf00      	nop
 8000586:	3728      	adds	r7, #40	@ 0x28
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	58024400 	.word	0x58024400
 8000590:	58021000 	.word	0x58021000

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <Error_Handler+0x8>

080005a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a6:	4b0a      	ldr	r3, [pc, #40]	@ (80005d0 <HAL_MspInit+0x30>)
 80005a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80005ac:	4a08      	ldr	r2, [pc, #32]	@ (80005d0 <HAL_MspInit+0x30>)
 80005ae:	f043 0302 	orr.w	r3, r3, #2
 80005b2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80005b6:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <HAL_MspInit+0x30>)
 80005b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80005bc:	f003 0302 	and.w	r3, r3, #2
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	58024400 	.word	0x58024400

080005d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b0b8      	sub	sp, #224	@ 0xe0
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	22b8      	movs	r2, #184	@ 0xb8
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f003 fad8 	bl	8003baa <memset>
  if(hspi->Instance==SPI2)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a2f      	ldr	r2, [pc, #188]	@ (80006bc <HAL_SPI_MspInit+0xe8>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d156      	bne.n	80006b2 <HAL_SPI_MspInit+0xde>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000604:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000608:	f04f 0300 	mov.w	r3, #0
 800060c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 24;
 8000614:	2318      	movs	r3, #24
 8000616:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 8000618:	2303      	movs	r3, #3
 800061a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800061c:	2302      	movs	r3, #2
 800061e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000620:	2302      	movs	r3, #2
 8000622:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000624:	23c0      	movs	r3, #192	@ 0xc0
 8000626:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000628:	2300      	movs	r3, #0
 800062a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000630:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000634:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fbb6 	bl	8001dac <HAL_RCCEx_PeriphCLKConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <HAL_SPI_MspInit+0x76>
    {
      Error_Handler();
 8000646:	f7ff ffa5 	bl	8000594 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800064a:	4b1d      	ldr	r3, [pc, #116]	@ (80006c0 <HAL_SPI_MspInit+0xec>)
 800064c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000650:	4a1b      	ldr	r2, [pc, #108]	@ (80006c0 <HAL_SPI_MspInit+0xec>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000656:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800065a:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <HAL_SPI_MspInit+0xec>)
 800065c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000660:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000668:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <HAL_SPI_MspInit+0xec>)
 800066a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800066e:	4a14      	ldr	r2, [pc, #80]	@ (80006c0 <HAL_SPI_MspInit+0xec>)
 8000670:	f043 0302 	orr.w	r3, r3, #2
 8000674:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <HAL_SPI_MspInit+0xec>)
 800067a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000686:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800068a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068e:	2302      	movs	r3, #2
 8000690:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006a0:	2305      	movs	r3, #5
 80006a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80006aa:	4619      	mov	r1, r3
 80006ac:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <HAL_SPI_MspInit+0xf0>)
 80006ae:	f000 fa77 	bl	8000ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80006b2:	bf00      	nop
 80006b4:	37e0      	adds	r7, #224	@ 0xe0
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40003800 	.word	0x40003800
 80006c0:	58024400 	.word	0x58024400
 80006c4:	58020400 	.word	0x58020400

080006c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <NMI_Handler+0x4>

080006d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <HardFault_Handler+0x4>

080006d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <MemManage_Handler+0x4>

080006e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <BusFault_Handler+0x4>

080006e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <UsageFault_Handler+0x4>

080006f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr

0800071a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071e:	f000 f917 	bl	8000950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800072c:	4b32      	ldr	r3, [pc, #200]	@ (80007f8 <SystemInit+0xd0>)
 800072e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000732:	4a31      	ldr	r2, [pc, #196]	@ (80007f8 <SystemInit+0xd0>)
 8000734:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000738:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800073c:	4b2f      	ldr	r3, [pc, #188]	@ (80007fc <SystemInit+0xd4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f003 030f 	and.w	r3, r3, #15
 8000744:	2b06      	cmp	r3, #6
 8000746:	d807      	bhi.n	8000758 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000748:	4b2c      	ldr	r3, [pc, #176]	@ (80007fc <SystemInit+0xd4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f023 030f 	bic.w	r3, r3, #15
 8000750:	4a2a      	ldr	r2, [pc, #168]	@ (80007fc <SystemInit+0xd4>)
 8000752:	f043 0307 	orr.w	r3, r3, #7
 8000756:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000758:	4b29      	ldr	r3, [pc, #164]	@ (8000800 <SystemInit+0xd8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a28      	ldr	r2, [pc, #160]	@ (8000800 <SystemInit+0xd8>)
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000764:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <SystemInit+0xd8>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800076a:	4b25      	ldr	r3, [pc, #148]	@ (8000800 <SystemInit+0xd8>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4924      	ldr	r1, [pc, #144]	@ (8000800 <SystemInit+0xd8>)
 8000770:	4b24      	ldr	r3, [pc, #144]	@ (8000804 <SystemInit+0xdc>)
 8000772:	4013      	ands	r3, r2
 8000774:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000776:	4b21      	ldr	r3, [pc, #132]	@ (80007fc <SystemInit+0xd4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f003 0308 	and.w	r3, r3, #8
 800077e:	2b00      	cmp	r3, #0
 8000780:	d007      	beq.n	8000792 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000782:	4b1e      	ldr	r3, [pc, #120]	@ (80007fc <SystemInit+0xd4>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f023 030f 	bic.w	r3, r3, #15
 800078a:	4a1c      	ldr	r2, [pc, #112]	@ (80007fc <SystemInit+0xd4>)
 800078c:	f043 0307 	orr.w	r3, r3, #7
 8000790:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000792:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <SystemInit+0xd8>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000798:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <SystemInit+0xd8>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800079e:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <SystemInit+0xd8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007a4:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <SystemInit+0xd8>)
 80007a6:	4a18      	ldr	r2, [pc, #96]	@ (8000808 <SystemInit+0xe0>)
 80007a8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80007aa:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <SystemInit+0xd8>)
 80007ac:	4a17      	ldr	r2, [pc, #92]	@ (800080c <SystemInit+0xe4>)
 80007ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80007b0:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <SystemInit+0xd8>)
 80007b2:	4a17      	ldr	r2, [pc, #92]	@ (8000810 <SystemInit+0xe8>)
 80007b4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007b6:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <SystemInit+0xd8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80007bc:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <SystemInit+0xd8>)
 80007be:	4a14      	ldr	r2, [pc, #80]	@ (8000810 <SystemInit+0xe8>)
 80007c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <SystemInit+0xd8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <SystemInit+0xd8>)
 80007ca:	4a11      	ldr	r2, [pc, #68]	@ (8000810 <SystemInit+0xe8>)
 80007cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <SystemInit+0xd8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <SystemInit+0xd8>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a09      	ldr	r2, [pc, #36]	@ (8000800 <SystemInit+0xd8>)
 80007da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80007de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007e0:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <SystemInit+0xd8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <SystemInit+0xec>)
 80007e8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	e000ed00 	.word	0xe000ed00
 80007fc:	52002000 	.word	0x52002000
 8000800:	58024400 	.word	0x58024400
 8000804:	eaf6ed7f 	.word	0xeaf6ed7f
 8000808:	02020200 	.word	0x02020200
 800080c:	01ff0000 	.word	0x01ff0000
 8000810:	01010280 	.word	0x01010280
 8000814:	52004000 	.word	0x52004000

08000818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000818:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000850 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800081c:	f7ff ff84 	bl	8000728 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000820:	480c      	ldr	r0, [pc, #48]	@ (8000854 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000822:	490d      	ldr	r1, [pc, #52]	@ (8000858 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000824:	4a0d      	ldr	r2, [pc, #52]	@ (800085c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000828:	e002      	b.n	8000830 <LoopCopyDataInit>

0800082a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800082c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082e:	3304      	adds	r3, #4

08000830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000834:	d3f9      	bcc.n	800082a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000836:	4a0a      	ldr	r2, [pc, #40]	@ (8000860 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000838:	4c0a      	ldr	r4, [pc, #40]	@ (8000864 <LoopFillZerobss+0x22>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800083c:	e001      	b.n	8000842 <LoopFillZerobss>

0800083e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000840:	3204      	adds	r2, #4

08000842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000844:	d3fb      	bcc.n	800083e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000846:	f003 f9b9 	bl	8003bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800084a:	f7ff fd5f 	bl	800030c <main>
  bx  lr
 800084e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000850:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000854:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000858:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800085c:	08003c34 	.word	0x08003c34
  ldr r2, =_sbss
 8000860:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000864:	240000b8 	.word	0x240000b8

08000868 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC3_IRQHandler>
	...

0800086c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000872:	2003      	movs	r0, #3
 8000874:	f000 f962 	bl	8000b3c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000878:	f001 f91e 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 800087c:	4602      	mov	r2, r0
 800087e:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <HAL_Init+0x68>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	0a1b      	lsrs	r3, r3, #8
 8000884:	f003 030f 	and.w	r3, r3, #15
 8000888:	4913      	ldr	r1, [pc, #76]	@ (80008d8 <HAL_Init+0x6c>)
 800088a:	5ccb      	ldrb	r3, [r1, r3]
 800088c:	f003 031f 	and.w	r3, r3, #31
 8000890:	fa22 f303 	lsr.w	r3, r2, r3
 8000894:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000896:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <HAL_Init+0x68>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f003 030f 	and.w	r3, r3, #15
 800089e:	4a0e      	ldr	r2, [pc, #56]	@ (80008d8 <HAL_Init+0x6c>)
 80008a0:	5cd3      	ldrb	r3, [r2, r3]
 80008a2:	f003 031f 	and.w	r3, r3, #31
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	fa22 f303 	lsr.w	r3, r2, r3
 80008ac:	4a0b      	ldr	r2, [pc, #44]	@ (80008dc <HAL_Init+0x70>)
 80008ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008b0:	4a0b      	ldr	r2, [pc, #44]	@ (80008e0 <HAL_Init+0x74>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008b6:	200f      	movs	r0, #15
 80008b8:	f000 f814 	bl	80008e4 <HAL_InitTick>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	e002      	b.n	80008cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008c6:	f7ff fe6b 	bl	80005a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ca:	2300      	movs	r3, #0
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	58024400 	.word	0x58024400
 80008d8:	08003c1c 	.word	0x08003c1c
 80008dc:	24000004 	.word	0x24000004
 80008e0:	24000000 	.word	0x24000000

080008e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80008ec:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <HAL_InitTick+0x60>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d101      	bne.n	80008f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80008f4:	2301      	movs	r3, #1
 80008f6:	e021      	b.n	800093c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80008f8:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <HAL_InitTick+0x64>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <HAL_InitTick+0x60>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000906:	fbb3 f3f1 	udiv	r3, r3, r1
 800090a:	fbb2 f3f3 	udiv	r3, r2, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f000 f939 	bl	8000b86 <HAL_SYSTICK_Config>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	e00e      	b.n	800093c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b0f      	cmp	r3, #15
 8000922:	d80a      	bhi.n	800093a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000924:	2200      	movs	r2, #0
 8000926:	6879      	ldr	r1, [r7, #4]
 8000928:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800092c:	f000 f911 	bl	8000b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000930:	4a06      	ldr	r2, [pc, #24]	@ (800094c <HAL_InitTick+0x68>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000936:	2300      	movs	r3, #0
 8000938:	e000      	b.n	800093c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
}
 800093c:	4618      	mov	r0, r3
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2400000c 	.word	0x2400000c
 8000948:	24000000 	.word	0x24000000
 800094c:	24000008 	.word	0x24000008

08000950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_IncTick+0x20>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_IncTick+0x24>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4413      	add	r3, r2
 8000960:	4a04      	ldr	r2, [pc, #16]	@ (8000974 <HAL_IncTick+0x24>)
 8000962:	6013      	str	r3, [r2, #0]
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	2400000c 	.word	0x2400000c
 8000974:	240000b4 	.word	0x240000b4

08000978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return uwTick;
 800097c:	4b03      	ldr	r3, [pc, #12]	@ (800098c <HAL_GetTick+0x14>)
 800097e:	681b      	ldr	r3, [r3, #0]
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	240000b4 	.word	0x240000b4

08000990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000998:	f7ff ffee 	bl	8000978 <HAL_GetTick>
 800099c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80009a8:	d005      	beq.n	80009b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009aa:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <HAL_Delay+0x44>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	4413      	add	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009b6:	bf00      	nop
 80009b8:	f7ff ffde 	bl	8000978 <HAL_GetTick>
 80009bc:	4602      	mov	r2, r0
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d8f7      	bhi.n	80009b8 <HAL_Delay+0x28>
  {
  }
}
 80009c8:	bf00      	nop
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	2400000c 	.word	0x2400000c

080009d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <__NVIC_SetPriorityGrouping+0x40>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009f4:	4013      	ands	r3, r2
 80009f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <__NVIC_SetPriorityGrouping+0x44>)
 8000a02:	4313      	orrs	r3, r2
 8000a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a06:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <__NVIC_SetPriorityGrouping+0x40>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	60d3      	str	r3, [r2, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00
 8000a1c:	05fa0000 	.word	0x05fa0000

08000a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a24:	4b04      	ldr	r3, [pc, #16]	@ (8000a38 <__NVIC_GetPriorityGrouping+0x18>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	f003 0307 	and.w	r3, r3, #7
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	db0a      	blt.n	8000a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	490c      	ldr	r1, [pc, #48]	@ (8000a88 <__NVIC_SetPriority+0x4c>)
 8000a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a5a:	0112      	lsls	r2, r2, #4
 8000a5c:	b2d2      	uxtb	r2, r2
 8000a5e:	440b      	add	r3, r1
 8000a60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a64:	e00a      	b.n	8000a7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4908      	ldr	r1, [pc, #32]	@ (8000a8c <__NVIC_SetPriority+0x50>)
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	f003 030f 	and.w	r3, r3, #15
 8000a72:	3b04      	subs	r3, #4
 8000a74:	0112      	lsls	r2, r2, #4
 8000a76:	b2d2      	uxtb	r2, r2
 8000a78:	440b      	add	r3, r1
 8000a7a:	761a      	strb	r2, [r3, #24]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000e100 	.word	0xe000e100
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b089      	sub	sp, #36	@ 0x24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	f1c3 0307 	rsb	r3, r3, #7
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	bf28      	it	cs
 8000aae:	2304      	movcs	r3, #4
 8000ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	2b06      	cmp	r3, #6
 8000ab8:	d902      	bls.n	8000ac0 <NVIC_EncodePriority+0x30>
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3b03      	subs	r3, #3
 8000abe:	e000      	b.n	8000ac2 <NVIC_EncodePriority+0x32>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43da      	mvns	r2, r3
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	43d9      	mvns	r1, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	4313      	orrs	r3, r2
         );
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3724      	adds	r7, #36	@ 0x24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b08:	d301      	bcc.n	8000b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00f      	b.n	8000b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b38 <SysTick_Config+0x40>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b16:	210f      	movs	r1, #15
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b1c:	f7ff ff8e 	bl	8000a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b20:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <SysTick_Config+0x40>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b26:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <SysTick_Config+0x40>)
 8000b28:	2207      	movs	r2, #7
 8000b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	e000e010 	.word	0xe000e010

08000b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ff47 	bl	80009d8 <__NVIC_SetPriorityGrouping>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b60:	f7ff ff5e 	bl	8000a20 <__NVIC_GetPriorityGrouping>
 8000b64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	6978      	ldr	r0, [r7, #20]
 8000b6c:	f7ff ff90 	bl	8000a90 <NVIC_EncodePriority>
 8000b70:	4602      	mov	r2, r0
 8000b72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff5f 	bl	8000a3c <__NVIC_SetPriority>
}
 8000b7e:	bf00      	nop
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff ffb2 	bl	8000af8 <SysTick_Config>
 8000b94:	4603      	mov	r3, r0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b089      	sub	sp, #36	@ 0x24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000bae:	4b86      	ldr	r3, [pc, #536]	@ (8000dc8 <HAL_GPIO_Init+0x228>)
 8000bb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000bb2:	e18c      	b.n	8000ece <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	2101      	movs	r1, #1
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 817e 	beq.w	8000ec8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d005      	beq.n	8000be4 <HAL_GPIO_Init+0x44>
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d130      	bne.n	8000c46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	2203      	movs	r2, #3
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	68da      	ldr	r2, [r3, #12]
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	4013      	ands	r3, r2
 8000c28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	091b      	lsrs	r3, r3, #4
 8000c30:	f003 0201 	and.w	r2, r3, #1
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	d017      	beq.n	8000c82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43db      	mvns	r3, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4013      	ands	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	689a      	ldr	r2, [r3, #8]
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f003 0303 	and.w	r3, r3, #3
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d123      	bne.n	8000cd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	08da      	lsrs	r2, r3, #3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3208      	adds	r2, #8
 8000c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	220f      	movs	r2, #15
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	691a      	ldr	r2, [r3, #16]
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	f003 0307 	and.w	r3, r3, #7
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	08da      	lsrs	r2, r3, #3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3208      	adds	r2, #8
 8000cd0:	69b9      	ldr	r1, [r7, #24]
 8000cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4013      	ands	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 0203 	and.w	r2, r3, #3
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f000 80d8 	beq.w	8000ec8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d18:	4b2c      	ldr	r3, [pc, #176]	@ (8000dcc <HAL_GPIO_Init+0x22c>)
 8000d1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d1e:	4a2b      	ldr	r2, [pc, #172]	@ (8000dcc <HAL_GPIO_Init+0x22c>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d28:	4b28      	ldr	r3, [pc, #160]	@ (8000dcc <HAL_GPIO_Init+0x22c>)
 8000d2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d36:	4a26      	ldr	r2, [pc, #152]	@ (8000dd0 <HAL_GPIO_Init+0x230>)
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	089b      	lsrs	r3, r3, #2
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	f003 0303 	and.w	r3, r3, #3
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	220f      	movs	r2, #15
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4013      	ands	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd4 <HAL_GPIO_Init+0x234>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d04a      	beq.n	8000df8 <HAL_GPIO_Init+0x258>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd8 <HAL_GPIO_Init+0x238>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d02b      	beq.n	8000dc2 <HAL_GPIO_Init+0x222>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ddc <HAL_GPIO_Init+0x23c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d025      	beq.n	8000dbe <HAL_GPIO_Init+0x21e>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a1a      	ldr	r2, [pc, #104]	@ (8000de0 <HAL_GPIO_Init+0x240>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d01f      	beq.n	8000dba <HAL_GPIO_Init+0x21a>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a19      	ldr	r2, [pc, #100]	@ (8000de4 <HAL_GPIO_Init+0x244>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d019      	beq.n	8000db6 <HAL_GPIO_Init+0x216>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a18      	ldr	r2, [pc, #96]	@ (8000de8 <HAL_GPIO_Init+0x248>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d013      	beq.n	8000db2 <HAL_GPIO_Init+0x212>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a17      	ldr	r2, [pc, #92]	@ (8000dec <HAL_GPIO_Init+0x24c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d00d      	beq.n	8000dae <HAL_GPIO_Init+0x20e>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a16      	ldr	r2, [pc, #88]	@ (8000df0 <HAL_GPIO_Init+0x250>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d007      	beq.n	8000daa <HAL_GPIO_Init+0x20a>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a15      	ldr	r2, [pc, #84]	@ (8000df4 <HAL_GPIO_Init+0x254>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d101      	bne.n	8000da6 <HAL_GPIO_Init+0x206>
 8000da2:	2309      	movs	r3, #9
 8000da4:	e029      	b.n	8000dfa <HAL_GPIO_Init+0x25a>
 8000da6:	230a      	movs	r3, #10
 8000da8:	e027      	b.n	8000dfa <HAL_GPIO_Init+0x25a>
 8000daa:	2307      	movs	r3, #7
 8000dac:	e025      	b.n	8000dfa <HAL_GPIO_Init+0x25a>
 8000dae:	2306      	movs	r3, #6
 8000db0:	e023      	b.n	8000dfa <HAL_GPIO_Init+0x25a>
 8000db2:	2305      	movs	r3, #5
 8000db4:	e021      	b.n	8000dfa <HAL_GPIO_Init+0x25a>
 8000db6:	2304      	movs	r3, #4
 8000db8:	e01f      	b.n	8000dfa <HAL_GPIO_Init+0x25a>
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e01d      	b.n	8000dfa <HAL_GPIO_Init+0x25a>
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	e01b      	b.n	8000dfa <HAL_GPIO_Init+0x25a>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e019      	b.n	8000dfa <HAL_GPIO_Init+0x25a>
 8000dc6:	bf00      	nop
 8000dc8:	58000080 	.word	0x58000080
 8000dcc:	58024400 	.word	0x58024400
 8000dd0:	58000400 	.word	0x58000400
 8000dd4:	58020000 	.word	0x58020000
 8000dd8:	58020400 	.word	0x58020400
 8000ddc:	58020800 	.word	0x58020800
 8000de0:	58020c00 	.word	0x58020c00
 8000de4:	58021000 	.word	0x58021000
 8000de8:	58021400 	.word	0x58021400
 8000dec:	58021800 	.word	0x58021800
 8000df0:	58021c00 	.word	0x58021c00
 8000df4:	58022400 	.word	0x58022400
 8000df8:	2300      	movs	r3, #0
 8000dfa:	69fa      	ldr	r2, [r7, #28]
 8000dfc:	f002 0203 	and.w	r2, r2, #3
 8000e00:	0092      	lsls	r2, r2, #2
 8000e02:	4093      	lsls	r3, r2
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e0a:	4938      	ldr	r1, [pc, #224]	@ (8000eec <HAL_GPIO_Init+0x34c>)
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	3302      	adds	r3, #2
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000e6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f47f ae6b 	bne.w	8000bb4 <HAL_GPIO_Init+0x14>
  }
}
 8000ede:	bf00      	nop
 8000ee0:	bf00      	nop
 8000ee2:	3724      	adds	r7, #36	@ 0x24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	58000400 	.word	0x58000400

08000ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	807b      	strh	r3, [r7, #2]
 8000efc:	4613      	mov	r3, r2
 8000efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f00:	787b      	ldrb	r3, [r7, #1]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f06:	887a      	ldrh	r2, [r7, #2]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000f0c:	e003      	b.n	8000f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f0e:	887b      	ldrh	r3, [r7, #2]
 8000f10:	041a      	lsls	r2, r3, #16
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	619a      	str	r2, [r3, #24]
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000f2c:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <HAL_PWREx_ConfigSupply+0x70>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	2b04      	cmp	r3, #4
 8000f36:	d00a      	beq.n	8000f4e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000f38:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <HAL_PWREx_ConfigSupply+0x70>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d001      	beq.n	8000f4a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e01f      	b.n	8000f8a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e01d      	b.n	8000f8a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000f4e:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <HAL_PWREx_ConfigSupply+0x70>)
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	f023 0207 	bic.w	r2, r3, #7
 8000f56:	490f      	ldr	r1, [pc, #60]	@ (8000f94 <HAL_PWREx_ConfigSupply+0x70>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000f5e:	f7ff fd0b 	bl	8000978 <HAL_GetTick>
 8000f62:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000f64:	e009      	b.n	8000f7a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000f66:	f7ff fd07 	bl	8000978 <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f74:	d901      	bls.n	8000f7a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e007      	b.n	8000f8a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <HAL_PWREx_ConfigSupply+0x70>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f86:	d1ee      	bne.n	8000f66 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	58024800 	.word	0x58024800

08000f98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	@ 0x30
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e3c8      	b.n	800173c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 8087 	beq.w	80010c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fb8:	4b88      	ldr	r3, [pc, #544]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000fc2:	4b86      	ldr	r3, [pc, #536]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 8000fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fca:	2b10      	cmp	r3, #16
 8000fcc:	d007      	beq.n	8000fde <HAL_RCC_OscConfig+0x46>
 8000fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fd0:	2b18      	cmp	r3, #24
 8000fd2:	d110      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x5e>
 8000fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d10b      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fde:	4b7f      	ldr	r3, [pc, #508]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d06c      	beq.n	80010c4 <HAL_RCC_OscConfig+0x12c>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d168      	bne.n	80010c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e3a2      	b.n	800173c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ffe:	d106      	bne.n	800100e <HAL_RCC_OscConfig+0x76>
 8001000:	4b76      	ldr	r3, [pc, #472]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a75      	ldr	r2, [pc, #468]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 8001006:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	e02e      	b.n	800106c <HAL_RCC_OscConfig+0xd4>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0x98>
 8001016:	4b71      	ldr	r3, [pc, #452]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a70      	ldr	r2, [pc, #448]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 800101c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	4b6e      	ldr	r3, [pc, #440]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a6d      	ldr	r2, [pc, #436]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 8001028:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e01d      	b.n	800106c <HAL_RCC_OscConfig+0xd4>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001038:	d10c      	bne.n	8001054 <HAL_RCC_OscConfig+0xbc>
 800103a:	4b68      	ldr	r3, [pc, #416]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a67      	ldr	r2, [pc, #412]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 8001040:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	4b65      	ldr	r3, [pc, #404]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a64      	ldr	r2, [pc, #400]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 800104c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	e00b      	b.n	800106c <HAL_RCC_OscConfig+0xd4>
 8001054:	4b61      	ldr	r3, [pc, #388]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a60      	ldr	r2, [pc, #384]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 800105a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	4b5e      	ldr	r3, [pc, #376]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a5d      	ldr	r2, [pc, #372]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 8001066:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800106a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d013      	beq.n	800109c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001074:	f7ff fc80 	bl	8000978 <HAL_GetTick>
 8001078:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800107c:	f7ff fc7c 	bl	8000978 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b64      	cmp	r3, #100	@ 0x64
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e356      	b.n	800173c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800108e:	4b53      	ldr	r3, [pc, #332]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f0      	beq.n	800107c <HAL_RCC_OscConfig+0xe4>
 800109a:	e014      	b.n	80010c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800109c:	f7ff fc6c 	bl	8000978 <HAL_GetTick>
 80010a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a4:	f7ff fc68 	bl	8000978 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b64      	cmp	r3, #100	@ 0x64
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e342      	b.n	800173c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010b6:	4b49      	ldr	r3, [pc, #292]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0x10c>
 80010c2:	e000      	b.n	80010c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 808c 	beq.w	80011ec <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010d4:	4b41      	ldr	r3, [pc, #260]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80010dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010de:	4b3f      	ldr	r3, [pc, #252]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 80010e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010e2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80010e4:	6a3b      	ldr	r3, [r7, #32]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d007      	beq.n	80010fa <HAL_RCC_OscConfig+0x162>
 80010ea:	6a3b      	ldr	r3, [r7, #32]
 80010ec:	2b18      	cmp	r3, #24
 80010ee:	d137      	bne.n	8001160 <HAL_RCC_OscConfig+0x1c8>
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d132      	bne.n	8001160 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010fa:	4b38      	ldr	r3, [pc, #224]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	2b00      	cmp	r3, #0
 8001104:	d005      	beq.n	8001112 <HAL_RCC_OscConfig+0x17a>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e314      	b.n	800173c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001112:	4b32      	ldr	r3, [pc, #200]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f023 0219 	bic.w	r2, r3, #25
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	492f      	ldr	r1, [pc, #188]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 8001120:	4313      	orrs	r3, r2
 8001122:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001124:	f7ff fc28 	bl	8000978 <HAL_GetTick>
 8001128:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800112c:	f7ff fc24 	bl	8000978 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e2fe      	b.n	800173c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800113e:	4b27      	ldr	r3, [pc, #156]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f0      	beq.n	800112c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114a:	4b24      	ldr	r3, [pc, #144]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	061b      	lsls	r3, r3, #24
 8001158:	4920      	ldr	r1, [pc, #128]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 800115a:	4313      	orrs	r3, r2
 800115c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800115e:	e045      	b.n	80011ec <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d026      	beq.n	80011b6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001168:	4b1c      	ldr	r3, [pc, #112]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f023 0219 	bic.w	r2, r3, #25
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	4919      	ldr	r1, [pc, #100]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 8001176:	4313      	orrs	r3, r2
 8001178:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117a:	f7ff fbfd 	bl	8000978 <HAL_GetTick>
 800117e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001182:	f7ff fbf9 	bl	8000978 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e2d3      	b.n	800173c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0f0      	beq.n	8001182 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a0:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	061b      	lsls	r3, r3, #24
 80011ae:	490b      	ldr	r1, [pc, #44]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	604b      	str	r3, [r1, #4]
 80011b4:	e01a      	b.n	80011ec <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b6:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a08      	ldr	r2, [pc, #32]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 80011bc:	f023 0301 	bic.w	r3, r3, #1
 80011c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c2:	f7ff fbd9 	bl	8000978 <HAL_GetTick>
 80011c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011c8:	e00a      	b.n	80011e0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ca:	f7ff fbd5 	bl	8000978 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d903      	bls.n	80011e0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e2af      	b.n	800173c <HAL_RCC_OscConfig+0x7a4>
 80011dc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011e0:	4b96      	ldr	r3, [pc, #600]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1ee      	bne.n	80011ca <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0310 	and.w	r3, r3, #16
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d06a      	beq.n	80012ce <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011f8:	4b90      	ldr	r3, [pc, #576]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001200:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001202:	4b8e      	ldr	r3, [pc, #568]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 8001204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001206:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	2b08      	cmp	r3, #8
 800120c:	d007      	beq.n	800121e <HAL_RCC_OscConfig+0x286>
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	2b18      	cmp	r3, #24
 8001212:	d11b      	bne.n	800124c <HAL_RCC_OscConfig+0x2b4>
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	2b01      	cmp	r3, #1
 800121c:	d116      	bne.n	800124c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800121e:	4b87      	ldr	r3, [pc, #540]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001226:	2b00      	cmp	r3, #0
 8001228:	d005      	beq.n	8001236 <HAL_RCC_OscConfig+0x29e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	2b80      	cmp	r3, #128	@ 0x80
 8001230:	d001      	beq.n	8001236 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e282      	b.n	800173c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001236:	4b81      	ldr	r3, [pc, #516]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	061b      	lsls	r3, r3, #24
 8001244:	497d      	ldr	r1, [pc, #500]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 8001246:	4313      	orrs	r3, r2
 8001248:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800124a:	e040      	b.n	80012ce <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d023      	beq.n	800129c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001254:	4b79      	ldr	r3, [pc, #484]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a78      	ldr	r2, [pc, #480]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 800125a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800125e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001260:	f7ff fb8a 	bl	8000978 <HAL_GetTick>
 8001264:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001268:	f7ff fb86 	bl	8000978 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e260      	b.n	800173c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800127a:	4b70      	ldr	r3, [pc, #448]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0f0      	beq.n	8001268 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001286:	4b6d      	ldr	r3, [pc, #436]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	061b      	lsls	r3, r3, #24
 8001294:	4969      	ldr	r1, [pc, #420]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 8001296:	4313      	orrs	r3, r2
 8001298:	60cb      	str	r3, [r1, #12]
 800129a:	e018      	b.n	80012ce <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800129c:	4b67      	ldr	r3, [pc, #412]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a66      	ldr	r2, [pc, #408]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 80012a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80012a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a8:	f7ff fb66 	bl	8000978 <HAL_GetTick>
 80012ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80012b0:	f7ff fb62 	bl	8000978 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e23c      	b.n	800173c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80012c2:	4b5e      	ldr	r3, [pc, #376]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d036      	beq.n	8001348 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d019      	beq.n	8001316 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e2:	4b56      	ldr	r3, [pc, #344]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 80012e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012e6:	4a55      	ldr	r2, [pc, #340]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ee:	f7ff fb43 	bl	8000978 <HAL_GetTick>
 80012f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f6:	f7ff fb3f 	bl	8000978 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e219      	b.n	800173c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001308:	4b4c      	ldr	r3, [pc, #304]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 800130a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f0      	beq.n	80012f6 <HAL_RCC_OscConfig+0x35e>
 8001314:	e018      	b.n	8001348 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001316:	4b49      	ldr	r3, [pc, #292]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 8001318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800131a:	4a48      	ldr	r2, [pc, #288]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 800131c:	f023 0301 	bic.w	r3, r3, #1
 8001320:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001322:	f7ff fb29 	bl	8000978 <HAL_GetTick>
 8001326:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800132a:	f7ff fb25 	bl	8000978 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e1ff      	b.n	800173c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800133c:	4b3f      	ldr	r3, [pc, #252]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 800133e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f0      	bne.n	800132a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0320 	and.w	r3, r3, #32
 8001350:	2b00      	cmp	r3, #0
 8001352:	d036      	beq.n	80013c2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d019      	beq.n	8001390 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800135c:	4b37      	ldr	r3, [pc, #220]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a36      	ldr	r2, [pc, #216]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 8001362:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001366:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001368:	f7ff fb06 	bl	8000978 <HAL_GetTick>
 800136c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001370:	f7ff fb02 	bl	8000978 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e1dc      	b.n	800173c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001382:	4b2e      	ldr	r3, [pc, #184]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x3d8>
 800138e:	e018      	b.n	80013c2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001390:	4b2a      	ldr	r3, [pc, #168]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a29      	ldr	r2, [pc, #164]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 8001396:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800139a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800139c:	f7ff faec 	bl	8000978 <HAL_GetTick>
 80013a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013a4:	f7ff fae8 	bl	8000978 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e1c2      	b.n	800173c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80013b6:	4b21      	ldr	r3, [pc, #132]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 8086 	beq.w	80014dc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <HAL_RCC_OscConfig+0x4a8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001440 <HAL_RCC_OscConfig+0x4a8>)
 80013d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80013dc:	f7ff facc 	bl	8000978 <HAL_GetTick>
 80013e0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e4:	f7ff fac8 	bl	8000978 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b64      	cmp	r3, #100	@ 0x64
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e1a2      	b.n	800173c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80013f6:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <HAL_RCC_OscConfig+0x4a8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d106      	bne.n	8001418 <HAL_RCC_OscConfig+0x480>
 800140a:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 800140c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800140e:	4a0b      	ldr	r2, [pc, #44]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6713      	str	r3, [r2, #112]	@ 0x70
 8001416:	e032      	b.n	800147e <HAL_RCC_OscConfig+0x4e6>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d111      	bne.n	8001444 <HAL_RCC_OscConfig+0x4ac>
 8001420:	4b06      	ldr	r3, [pc, #24]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 8001422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001424:	4a05      	ldr	r2, [pc, #20]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 8001426:	f023 0301 	bic.w	r3, r3, #1
 800142a:	6713      	str	r3, [r2, #112]	@ 0x70
 800142c:	4b03      	ldr	r3, [pc, #12]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 800142e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001430:	4a02      	ldr	r2, [pc, #8]	@ (800143c <HAL_RCC_OscConfig+0x4a4>)
 8001432:	f023 0304 	bic.w	r3, r3, #4
 8001436:	6713      	str	r3, [r2, #112]	@ 0x70
 8001438:	e021      	b.n	800147e <HAL_RCC_OscConfig+0x4e6>
 800143a:	bf00      	nop
 800143c:	58024400 	.word	0x58024400
 8001440:	58024800 	.word	0x58024800
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b05      	cmp	r3, #5
 800144a:	d10c      	bne.n	8001466 <HAL_RCC_OscConfig+0x4ce>
 800144c:	4b83      	ldr	r3, [pc, #524]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 800144e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001450:	4a82      	ldr	r2, [pc, #520]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	6713      	str	r3, [r2, #112]	@ 0x70
 8001458:	4b80      	ldr	r3, [pc, #512]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 800145a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800145c:	4a7f      	ldr	r2, [pc, #508]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6713      	str	r3, [r2, #112]	@ 0x70
 8001464:	e00b      	b.n	800147e <HAL_RCC_OscConfig+0x4e6>
 8001466:	4b7d      	ldr	r3, [pc, #500]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 8001468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800146a:	4a7c      	ldr	r2, [pc, #496]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 800146c:	f023 0301 	bic.w	r3, r3, #1
 8001470:	6713      	str	r3, [r2, #112]	@ 0x70
 8001472:	4b7a      	ldr	r3, [pc, #488]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001476:	4a79      	ldr	r2, [pc, #484]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 8001478:	f023 0304 	bic.w	r3, r3, #4
 800147c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d015      	beq.n	80014b2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001486:	f7ff fa77 	bl	8000978 <HAL_GetTick>
 800148a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800148c:	e00a      	b.n	80014a4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148e:	f7ff fa73 	bl	8000978 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800149c:	4293      	cmp	r3, r2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e14b      	b.n	800173c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014a4:	4b6d      	ldr	r3, [pc, #436]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 80014a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0ee      	beq.n	800148e <HAL_RCC_OscConfig+0x4f6>
 80014b0:	e014      	b.n	80014dc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b2:	f7ff fa61 	bl	8000978 <HAL_GetTick>
 80014b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014b8:	e00a      	b.n	80014d0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ba:	f7ff fa5d 	bl	8000978 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e135      	b.n	800173c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014d0:	4b62      	ldr	r3, [pc, #392]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 80014d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1ee      	bne.n	80014ba <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 812a 	beq.w	800173a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80014e6:	4b5d      	ldr	r3, [pc, #372]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80014ee:	2b18      	cmp	r3, #24
 80014f0:	f000 80ba 	beq.w	8001668 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	f040 8095 	bne.w	8001628 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fe:	4b57      	ldr	r3, [pc, #348]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a56      	ldr	r2, [pc, #344]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 8001504:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150a:	f7ff fa35 	bl	8000978 <HAL_GetTick>
 800150e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001512:	f7ff fa31 	bl	8000978 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e10b      	b.n	800173c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001524:	4b4d      	ldr	r3, [pc, #308]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f0      	bne.n	8001512 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001530:	4b4a      	ldr	r3, [pc, #296]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 8001532:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001534:	4b4a      	ldr	r3, [pc, #296]	@ (8001660 <HAL_RCC_OscConfig+0x6c8>)
 8001536:	4013      	ands	r3, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001540:	0112      	lsls	r2, r2, #4
 8001542:	430a      	orrs	r2, r1
 8001544:	4945      	ldr	r1, [pc, #276]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 8001546:	4313      	orrs	r3, r2
 8001548:	628b      	str	r3, [r1, #40]	@ 0x28
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	3b01      	subs	r3, #1
 8001550:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001558:	3b01      	subs	r3, #1
 800155a:	025b      	lsls	r3, r3, #9
 800155c:	b29b      	uxth	r3, r3
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001564:	3b01      	subs	r3, #1
 8001566:	041b      	lsls	r3, r3, #16
 8001568:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001572:	3b01      	subs	r3, #1
 8001574:	061b      	lsls	r3, r3, #24
 8001576:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800157a:	4938      	ldr	r1, [pc, #224]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 800157c:	4313      	orrs	r3, r2
 800157e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001580:	4b36      	ldr	r3, [pc, #216]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 8001582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001584:	4a35      	ldr	r2, [pc, #212]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 8001586:	f023 0301 	bic.w	r3, r3, #1
 800158a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800158c:	4b33      	ldr	r3, [pc, #204]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 800158e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001590:	4b34      	ldr	r3, [pc, #208]	@ (8001664 <HAL_RCC_OscConfig+0x6cc>)
 8001592:	4013      	ands	r3, r2
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001598:	00d2      	lsls	r2, r2, #3
 800159a:	4930      	ldr	r1, [pc, #192]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 800159c:	4313      	orrs	r3, r2
 800159e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80015a0:	4b2e      	ldr	r3, [pc, #184]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 80015a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a4:	f023 020c 	bic.w	r2, r3, #12
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ac:	492b      	ldr	r1, [pc, #172]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80015b2:	4b2a      	ldr	r3, [pc, #168]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 80015b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b6:	f023 0202 	bic.w	r2, r3, #2
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015be:	4927      	ldr	r1, [pc, #156]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80015c4:	4b25      	ldr	r3, [pc, #148]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 80015c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c8:	4a24      	ldr	r2, [pc, #144]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 80015ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80015d0:	4b22      	ldr	r3, [pc, #136]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 80015d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d4:	4a21      	ldr	r2, [pc, #132]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 80015d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80015dc:	4b1f      	ldr	r3, [pc, #124]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 80015de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e0:	4a1e      	ldr	r2, [pc, #120]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 80015e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80015e8:	4b1c      	ldr	r3, [pc, #112]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 80015ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ec:	4a1b      	ldr	r2, [pc, #108]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f4:	4b19      	ldr	r3, [pc, #100]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a18      	ldr	r2, [pc, #96]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 80015fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001600:	f7ff f9ba 	bl	8000978 <HAL_GetTick>
 8001604:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001608:	f7ff f9b6 	bl	8000978 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e090      	b.n	800173c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800161a:	4b10      	ldr	r3, [pc, #64]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x670>
 8001626:	e088      	b.n	800173a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001628:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0b      	ldr	r2, [pc, #44]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 800162e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff f9a0 	bl	8000978 <HAL_GetTick>
 8001638:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163c:	f7ff f99c 	bl	8000978 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e076      	b.n	800173c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800164e:	4b03      	ldr	r3, [pc, #12]	@ (800165c <HAL_RCC_OscConfig+0x6c4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x6a4>
 800165a:	e06e      	b.n	800173a <HAL_RCC_OscConfig+0x7a2>
 800165c:	58024400 	.word	0x58024400
 8001660:	fffffc0c 	.word	0xfffffc0c
 8001664:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001668:	4b36      	ldr	r3, [pc, #216]	@ (8001744 <HAL_RCC_OscConfig+0x7ac>)
 800166a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800166e:	4b35      	ldr	r3, [pc, #212]	@ (8001744 <HAL_RCC_OscConfig+0x7ac>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001678:	2b01      	cmp	r3, #1
 800167a:	d031      	beq.n	80016e0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	f003 0203 	and.w	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001686:	429a      	cmp	r2, r3
 8001688:	d12a      	bne.n	80016e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d122      	bne.n	80016e0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d11a      	bne.n	80016e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	0a5b      	lsrs	r3, r3, #9
 80016ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d111      	bne.n	80016e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	0c1b      	lsrs	r3, r3, #16
 80016c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d108      	bne.n	80016e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	0e1b      	lsrs	r3, r3, #24
 80016d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e02b      	b.n	800173c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80016e4:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <HAL_RCC_OscConfig+0x7ac>)
 80016e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016e8:	08db      	lsrs	r3, r3, #3
 80016ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80016ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d01f      	beq.n	800173a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80016fa:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <HAL_RCC_OscConfig+0x7ac>)
 80016fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016fe:	4a11      	ldr	r2, [pc, #68]	@ (8001744 <HAL_RCC_OscConfig+0x7ac>)
 8001700:	f023 0301 	bic.w	r3, r3, #1
 8001704:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001706:	f7ff f937 	bl	8000978 <HAL_GetTick>
 800170a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800170c:	bf00      	nop
 800170e:	f7ff f933 	bl	8000978 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001716:	4293      	cmp	r3, r2
 8001718:	d0f9      	beq.n	800170e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800171a:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <HAL_RCC_OscConfig+0x7ac>)
 800171c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800171e:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <HAL_RCC_OscConfig+0x7b0>)
 8001720:	4013      	ands	r3, r2
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001726:	00d2      	lsls	r2, r2, #3
 8001728:	4906      	ldr	r1, [pc, #24]	@ (8001744 <HAL_RCC_OscConfig+0x7ac>)
 800172a:	4313      	orrs	r3, r2
 800172c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800172e:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <HAL_RCC_OscConfig+0x7ac>)
 8001730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001732:	4a04      	ldr	r2, [pc, #16]	@ (8001744 <HAL_RCC_OscConfig+0x7ac>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3730      	adds	r7, #48	@ 0x30
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	58024400 	.word	0x58024400
 8001748:	ffff0007 	.word	0xffff0007

0800174c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e19c      	b.n	8001a9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001760:	4b8a      	ldr	r3, [pc, #552]	@ (800198c <HAL_RCC_ClockConfig+0x240>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 030f 	and.w	r3, r3, #15
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d910      	bls.n	8001790 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b87      	ldr	r3, [pc, #540]	@ (800198c <HAL_RCC_ClockConfig+0x240>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 020f 	bic.w	r2, r3, #15
 8001776:	4985      	ldr	r1, [pc, #532]	@ (800198c <HAL_RCC_ClockConfig+0x240>)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	4313      	orrs	r3, r2
 800177c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800177e:	4b83      	ldr	r3, [pc, #524]	@ (800198c <HAL_RCC_ClockConfig+0x240>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d001      	beq.n	8001790 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e184      	b.n	8001a9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d010      	beq.n	80017be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691a      	ldr	r2, [r3, #16]
 80017a0:	4b7b      	ldr	r3, [pc, #492]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d908      	bls.n	80017be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80017ac:	4b78      	ldr	r3, [pc, #480]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	4975      	ldr	r1, [pc, #468]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d010      	beq.n	80017ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695a      	ldr	r2, [r3, #20]
 80017ce:	4b70      	ldr	r3, [pc, #448]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d908      	bls.n	80017ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80017da:	4b6d      	ldr	r3, [pc, #436]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	496a      	ldr	r1, [pc, #424]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d010      	beq.n	800181a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	699a      	ldr	r2, [r3, #24]
 80017fc:	4b64      	ldr	r3, [pc, #400]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001804:	429a      	cmp	r2, r3
 8001806:	d908      	bls.n	800181a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001808:	4b61      	ldr	r3, [pc, #388]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	495e      	ldr	r1, [pc, #376]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 8001816:	4313      	orrs	r3, r2
 8001818:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0320 	and.w	r3, r3, #32
 8001822:	2b00      	cmp	r3, #0
 8001824:	d010      	beq.n	8001848 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69da      	ldr	r2, [r3, #28]
 800182a:	4b59      	ldr	r3, [pc, #356]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001832:	429a      	cmp	r2, r3
 8001834:	d908      	bls.n	8001848 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001836:	4b56      	ldr	r3, [pc, #344]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	4953      	ldr	r1, [pc, #332]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 8001844:	4313      	orrs	r3, r2
 8001846:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d010      	beq.n	8001876 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	4b4d      	ldr	r3, [pc, #308]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 030f 	and.w	r3, r3, #15
 8001860:	429a      	cmp	r2, r3
 8001862:	d908      	bls.n	8001876 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001864:	4b4a      	ldr	r3, [pc, #296]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f023 020f 	bic.w	r2, r3, #15
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	4947      	ldr	r1, [pc, #284]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 8001872:	4313      	orrs	r3, r2
 8001874:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d055      	beq.n	800192e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001882:	4b43      	ldr	r3, [pc, #268]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	4940      	ldr	r1, [pc, #256]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 8001890:	4313      	orrs	r3, r2
 8001892:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d107      	bne.n	80018ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800189c:	4b3c      	ldr	r3, [pc, #240]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d121      	bne.n	80018ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0f6      	b.n	8001a9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d107      	bne.n	80018c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018b4:	4b36      	ldr	r3, [pc, #216]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d115      	bne.n	80018ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0ea      	b.n	8001a9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d107      	bne.n	80018dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018cc:	4b30      	ldr	r3, [pc, #192]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d109      	bne.n	80018ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0de      	b.n	8001a9a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0d6      	b.n	8001a9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018ec:	4b28      	ldr	r3, [pc, #160]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	f023 0207 	bic.w	r2, r3, #7
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	4925      	ldr	r1, [pc, #148]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018fe:	f7ff f83b 	bl	8000978 <HAL_GetTick>
 8001902:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001904:	e00a      	b.n	800191c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001906:	f7ff f837 	bl	8000978 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001914:	4293      	cmp	r3, r2
 8001916:	d901      	bls.n	800191c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e0be      	b.n	8001a9a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191c:	4b1c      	ldr	r3, [pc, #112]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	429a      	cmp	r2, r3
 800192c:	d1eb      	bne.n	8001906 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d010      	beq.n	800195c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	4b14      	ldr	r3, [pc, #80]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	429a      	cmp	r2, r3
 8001948:	d208      	bcs.n	800195c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800194a:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f023 020f 	bic.w	r2, r3, #15
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	490e      	ldr	r1, [pc, #56]	@ (8001990 <HAL_RCC_ClockConfig+0x244>)
 8001958:	4313      	orrs	r3, r2
 800195a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800195c:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <HAL_RCC_ClockConfig+0x240>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 030f 	and.w	r3, r3, #15
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d214      	bcs.n	8001994 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196a:	4b08      	ldr	r3, [pc, #32]	@ (800198c <HAL_RCC_ClockConfig+0x240>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 020f 	bic.w	r2, r3, #15
 8001972:	4906      	ldr	r1, [pc, #24]	@ (800198c <HAL_RCC_ClockConfig+0x240>)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b04      	ldr	r3, [pc, #16]	@ (800198c <HAL_RCC_ClockConfig+0x240>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d005      	beq.n	8001994 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e086      	b.n	8001a9a <HAL_RCC_ClockConfig+0x34e>
 800198c:	52002000 	.word	0x52002000
 8001990:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d010      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	4b3f      	ldr	r3, [pc, #252]	@ (8001aa4 <HAL_RCC_ClockConfig+0x358>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d208      	bcs.n	80019c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80019b0:	4b3c      	ldr	r3, [pc, #240]	@ (8001aa4 <HAL_RCC_ClockConfig+0x358>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	4939      	ldr	r1, [pc, #228]	@ (8001aa4 <HAL_RCC_ClockConfig+0x358>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d010      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	4b34      	ldr	r3, [pc, #208]	@ (8001aa4 <HAL_RCC_ClockConfig+0x358>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019da:	429a      	cmp	r2, r3
 80019dc:	d208      	bcs.n	80019f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80019de:	4b31      	ldr	r3, [pc, #196]	@ (8001aa4 <HAL_RCC_ClockConfig+0x358>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	492e      	ldr	r1, [pc, #184]	@ (8001aa4 <HAL_RCC_ClockConfig+0x358>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0310 	and.w	r3, r3, #16
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d010      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699a      	ldr	r2, [r3, #24]
 8001a00:	4b28      	ldr	r3, [pc, #160]	@ (8001aa4 <HAL_RCC_ClockConfig+0x358>)
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d208      	bcs.n	8001a1e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a0c:	4b25      	ldr	r3, [pc, #148]	@ (8001aa4 <HAL_RCC_ClockConfig+0x358>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4922      	ldr	r1, [pc, #136]	@ (8001aa4 <HAL_RCC_ClockConfig+0x358>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0320 	and.w	r3, r3, #32
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d010      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69da      	ldr	r2, [r3, #28]
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <HAL_RCC_ClockConfig+0x358>)
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d208      	bcs.n	8001a4c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <HAL_RCC_ClockConfig+0x358>)
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	4917      	ldr	r1, [pc, #92]	@ (8001aa4 <HAL_RCC_ClockConfig+0x358>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a4c:	f000 f834 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 8001a50:	4602      	mov	r2, r0
 8001a52:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <HAL_RCC_ClockConfig+0x358>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	0a1b      	lsrs	r3, r3, #8
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	4912      	ldr	r1, [pc, #72]	@ (8001aa8 <HAL_RCC_ClockConfig+0x35c>)
 8001a5e:	5ccb      	ldrb	r3, [r1, r3]
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	fa22 f303 	lsr.w	r3, r2, r3
 8001a68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <HAL_RCC_ClockConfig+0x358>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa8 <HAL_RCC_ClockConfig+0x35c>)
 8001a74:	5cd3      	ldrb	r3, [r2, r3]
 8001a76:	f003 031f 	and.w	r3, r3, #31
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a80:	4a0a      	ldr	r2, [pc, #40]	@ (8001aac <HAL_RCC_ClockConfig+0x360>)
 8001a82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a84:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab0 <HAL_RCC_ClockConfig+0x364>)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab4 <HAL_RCC_ClockConfig+0x368>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe ff28 	bl	80008e4 <HAL_InitTick>
 8001a94:	4603      	mov	r3, r0
 8001a96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	58024400 	.word	0x58024400
 8001aa8:	08003c1c 	.word	0x08003c1c
 8001aac:	24000004 	.word	0x24000004
 8001ab0:	24000000 	.word	0x24000000
 8001ab4:	24000008 	.word	0x24000008

08001ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	@ 0x24
 8001abc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001abe:	4bb3      	ldr	r3, [pc, #716]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ac6:	2b18      	cmp	r3, #24
 8001ac8:	f200 8155 	bhi.w	8001d76 <HAL_RCC_GetSysClockFreq+0x2be>
 8001acc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad2:	bf00      	nop
 8001ad4:	08001b39 	.word	0x08001b39
 8001ad8:	08001d77 	.word	0x08001d77
 8001adc:	08001d77 	.word	0x08001d77
 8001ae0:	08001d77 	.word	0x08001d77
 8001ae4:	08001d77 	.word	0x08001d77
 8001ae8:	08001d77 	.word	0x08001d77
 8001aec:	08001d77 	.word	0x08001d77
 8001af0:	08001d77 	.word	0x08001d77
 8001af4:	08001b5f 	.word	0x08001b5f
 8001af8:	08001d77 	.word	0x08001d77
 8001afc:	08001d77 	.word	0x08001d77
 8001b00:	08001d77 	.word	0x08001d77
 8001b04:	08001d77 	.word	0x08001d77
 8001b08:	08001d77 	.word	0x08001d77
 8001b0c:	08001d77 	.word	0x08001d77
 8001b10:	08001d77 	.word	0x08001d77
 8001b14:	08001b65 	.word	0x08001b65
 8001b18:	08001d77 	.word	0x08001d77
 8001b1c:	08001d77 	.word	0x08001d77
 8001b20:	08001d77 	.word	0x08001d77
 8001b24:	08001d77 	.word	0x08001d77
 8001b28:	08001d77 	.word	0x08001d77
 8001b2c:	08001d77 	.word	0x08001d77
 8001b30:	08001d77 	.word	0x08001d77
 8001b34:	08001b6b 	.word	0x08001b6b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b38:	4b94      	ldr	r3, [pc, #592]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0320 	and.w	r3, r3, #32
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d009      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001b44:	4b91      	ldr	r3, [pc, #580]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	08db      	lsrs	r3, r3, #3
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	4a90      	ldr	r2, [pc, #576]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
 8001b54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001b56:	e111      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001b58:	4b8d      	ldr	r3, [pc, #564]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001b5a:	61bb      	str	r3, [r7, #24]
      break;
 8001b5c:	e10e      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001b5e:	4b8d      	ldr	r3, [pc, #564]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001b60:	61bb      	str	r3, [r7, #24]
      break;
 8001b62:	e10b      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001b64:	4b8c      	ldr	r3, [pc, #560]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001b66:	61bb      	str	r3, [r7, #24]
      break;
 8001b68:	e108      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001b6a:	4b88      	ldr	r3, [pc, #544]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001b74:	4b85      	ldr	r3, [pc, #532]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b7e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001b80:	4b82      	ldr	r3, [pc, #520]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001b8a:	4b80      	ldr	r3, [pc, #512]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b8e:	08db      	lsrs	r3, r3, #3
 8001b90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	fb02 f303 	mul.w	r3, r2, r3
 8001b9a:	ee07 3a90 	vmov	s15, r3
 8001b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ba2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80e1 	beq.w	8001d70 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	f000 8083 	beq.w	8001cbc <HAL_RCC_GetSysClockFreq+0x204>
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	f200 80a1 	bhi.w	8001d00 <HAL_RCC_GetSysClockFreq+0x248>
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_RCC_GetSysClockFreq+0x114>
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d056      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001bca:	e099      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001bcc:	4b6f      	ldr	r3, [pc, #444]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0320 	and.w	r3, r3, #32
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d02d      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001bd8:	4b6c      	ldr	r3, [pc, #432]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	08db      	lsrs	r3, r3, #3
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	4a6b      	ldr	r2, [pc, #428]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
 8001be8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	ee07 3a90 	vmov	s15, r3
 8001bf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	ee07 3a90 	vmov	s15, r3
 8001bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c02:	4b62      	ldr	r3, [pc, #392]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c0a:	ee07 3a90 	vmov	s15, r3
 8001c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c12:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c16:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8001d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001c32:	e087      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	ee07 3a90 	vmov	s15, r3
 8001c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c3e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001da0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c46:	4b51      	ldr	r3, [pc, #324]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c4e:	ee07 3a90 	vmov	s15, r3
 8001c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c56:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c5a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8001d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001c76:	e065      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	ee07 3a90 	vmov	s15, r3
 8001c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c82:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001da4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c8a:	4b40      	ldr	r3, [pc, #256]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c92:	ee07 3a90 	vmov	s15, r3
 8001c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c9e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8001d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001cba:	e043      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cc6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001da8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cce:	4b2f      	ldr	r3, [pc, #188]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cd6:	ee07 3a90 	vmov	s15, r3
 8001cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cde:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ce2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8001d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001cfe:	e021      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	ee07 3a90 	vmov	s15, r3
 8001d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d0a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001da4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d12:	4b1e      	ldr	r3, [pc, #120]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d1a:	ee07 3a90 	vmov	s15, r3
 8001d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d22:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d26:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8001d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001d42:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001d44:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d48:	0a5b      	lsrs	r3, r3, #9
 8001d4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d4e:	3301      	adds	r3, #1
 8001d50:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	ee07 3a90 	vmov	s15, r3
 8001d58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d68:	ee17 3a90 	vmov	r3, s15
 8001d6c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001d6e:	e005      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61bb      	str	r3, [r7, #24]
      break;
 8001d74:	e002      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001d76:	4b07      	ldr	r3, [pc, #28]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001d78:	61bb      	str	r3, [r7, #24]
      break;
 8001d7a:	bf00      	nop
  }

  return sysclockfreq;
 8001d7c:	69bb      	ldr	r3, [r7, #24]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3724      	adds	r7, #36	@ 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	58024400 	.word	0x58024400
 8001d90:	03d09000 	.word	0x03d09000
 8001d94:	003d0900 	.word	0x003d0900
 8001d98:	007a1200 	.word	0x007a1200
 8001d9c:	46000000 	.word	0x46000000
 8001da0:	4c742400 	.word	0x4c742400
 8001da4:	4a742400 	.word	0x4a742400
 8001da8:	4af42400 	.word	0x4af42400

08001dac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001db0:	b0c6      	sub	sp, #280	@ 0x118
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001db8:	2300      	movs	r3, #0
 8001dba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8001dd0:	2500      	movs	r5, #0
 8001dd2:	ea54 0305 	orrs.w	r3, r4, r5
 8001dd6:	d049      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8001dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001ddc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001dde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001de2:	d02f      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8001de4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001de8:	d828      	bhi.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8001dea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001dee:	d01a      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001df0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001df4:	d822      	bhi.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001dfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001dfe:	d007      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e00:	e01c      	b.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e02:	4bab      	ldr	r3, [pc, #684]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e06:	4aaa      	ldr	r2, [pc, #680]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8001e0e:	e01a      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8001e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001e14:	3308      	adds	r3, #8
 8001e16:	2102      	movs	r1, #2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f001 f967 	bl	80030ec <RCCEx_PLL2_Config>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8001e24:	e00f      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8001e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001e2a:	3328      	adds	r3, #40	@ 0x28
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f001 fa0e 	bl	8003250 <RCCEx_PLL3_Config>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8001e3a:	e004      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8001e42:	e000      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8001e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001e46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10a      	bne.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001e4e:	4b98      	ldr	r3, [pc, #608]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8001e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001e5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e5c:	4a94      	ldr	r2, [pc, #592]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001e5e:	430b      	orrs	r3, r1
 8001e60:	6513      	str	r3, [r2, #80]	@ 0x50
 8001e62:	e003      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001e68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e74:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8001e78:	f04f 0900 	mov.w	r9, #0
 8001e7c:	ea58 0309 	orrs.w	r3, r8, r9
 8001e80:	d047      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8001e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d82a      	bhi.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8001e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e92:	bf00      	nop
 8001e94:	08001ea9 	.word	0x08001ea9
 8001e98:	08001eb7 	.word	0x08001eb7
 8001e9c:	08001ecd 	.word	0x08001ecd
 8001ea0:	08001eeb 	.word	0x08001eeb
 8001ea4:	08001eeb 	.word	0x08001eeb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ea8:	4b81      	ldr	r3, [pc, #516]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eac:	4a80      	ldr	r2, [pc, #512]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8001eb4:	e01a      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8001eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001eba:	3308      	adds	r3, #8
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f001 f914 	bl	80030ec <RCCEx_PLL2_Config>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8001eca:	e00f      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001ed0:	3328      	adds	r3, #40	@ 0x28
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f001 f9bb 	bl	8003250 <RCCEx_PLL3_Config>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8001ee0:	e004      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8001ee8:	e000      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8001eea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001eec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10a      	bne.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ef4:	4b6e      	ldr	r3, [pc, #440]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ef8:	f023 0107 	bic.w	r1, r3, #7
 8001efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f02:	4a6b      	ldr	r2, [pc, #428]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f04:	430b      	orrs	r3, r1
 8001f06:	6513      	str	r3, [r2, #80]	@ 0x50
 8001f08:	e003      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001f0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8001f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8001f1e:	f04f 0b00 	mov.w	fp, #0
 8001f22:	ea5a 030b 	orrs.w	r3, sl, fp
 8001f26:	d05b      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8001f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001f2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f30:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8001f34:	d03b      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x202>
 8001f36:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8001f3a:	d834      	bhi.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8001f3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f40:	d037      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8001f42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f46:	d82e      	bhi.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8001f48:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8001f4c:	d033      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8001f4e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8001f52:	d828      	bhi.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8001f54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f58:	d01a      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8001f5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f5e:	d822      	bhi.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8001f64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001f68:	d007      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8001f6a:	e01c      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f6c:	4b50      	ldr	r3, [pc, #320]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f70:	4a4f      	ldr	r2, [pc, #316]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8001f78:	e01e      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8001f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001f7e:	3308      	adds	r3, #8
 8001f80:	2100      	movs	r1, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f001 f8b2 	bl	80030ec <RCCEx_PLL2_Config>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8001f8e:	e013      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001f94:	3328      	adds	r3, #40	@ 0x28
 8001f96:	2100      	movs	r1, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f001 f959 	bl	8003250 <RCCEx_PLL3_Config>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8001fac:	e004      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8001fae:	bf00      	nop
 8001fb0:	e002      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8001fb2:	bf00      	nop
 8001fb4:	e000      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8001fb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001fb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10b      	bne.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8001fc0:	4b3b      	ldr	r3, [pc, #236]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8001fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001fcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001fd0:	4a37      	ldr	r2, [pc, #220]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fd2:	430b      	orrs	r3, r1
 8001fd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fd6:	e003      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001fdc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8001fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8001fec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001ff6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	d05d      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002004:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002008:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800200c:	d03b      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800200e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002012:	d834      	bhi.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002014:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002018:	d037      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800201a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800201e:	d82e      	bhi.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002020:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002024:	d033      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8002026:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800202a:	d828      	bhi.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800202c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002030:	d01a      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002032:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002036:	d822      	bhi.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800203c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002040:	d007      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002042:	e01c      	b.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002044:	4b1a      	ldr	r3, [pc, #104]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002048:	4a19      	ldr	r2, [pc, #100]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800204a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800204e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002050:	e01e      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002056:	3308      	adds	r3, #8
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f001 f846 	bl	80030ec <RCCEx_PLL2_Config>
 8002060:	4603      	mov	r3, r0
 8002062:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002066:	e013      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800206c:	3328      	adds	r3, #40	@ 0x28
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f001 f8ed 	bl	8003250 <RCCEx_PLL3_Config>
 8002076:	4603      	mov	r3, r0
 8002078:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800207c:	e008      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002084:	e004      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002086:	bf00      	nop
 8002088:	e002      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800208a:	bf00      	nop
 800208c:	e000      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800208e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002090:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10d      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80020a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80020a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80020a8:	4a01      	ldr	r2, [pc, #4]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80020aa:	430b      	orrs	r3, r1
 80020ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ae:	e005      	b.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80020b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80020b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80020bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80020c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80020c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80020cc:	2300      	movs	r3, #0
 80020ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80020d2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4313      	orrs	r3, r2
 80020da:	d03a      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80020dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80020e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e2:	2b30      	cmp	r3, #48	@ 0x30
 80020e4:	d01f      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80020e6:	2b30      	cmp	r3, #48	@ 0x30
 80020e8:	d819      	bhi.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	d00c      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80020ee:	2b20      	cmp	r3, #32
 80020f0:	d815      	bhi.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d019      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80020f6:	2b10      	cmp	r3, #16
 80020f8:	d111      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020fa:	4baa      	ldr	r3, [pc, #680]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80020fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fe:	4aa9      	ldr	r2, [pc, #676]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002104:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002106:	e011      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800210c:	3308      	adds	r3, #8
 800210e:	2102      	movs	r1, #2
 8002110:	4618      	mov	r0, r3
 8002112:	f000 ffeb 	bl	80030ec <RCCEx_PLL2_Config>
 8002116:	4603      	mov	r3, r0
 8002118:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800211c:	e006      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002124:	e002      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002126:	bf00      	nop
 8002128:	e000      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800212a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800212c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10a      	bne.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002134:	4b9b      	ldr	r3, [pc, #620]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002138:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800213c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002142:	4a98      	ldr	r2, [pc, #608]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002144:	430b      	orrs	r3, r1
 8002146:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002148:	e003      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800214a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800214e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800215e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002162:	2300      	movs	r3, #0
 8002164:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002168:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800216c:	460b      	mov	r3, r1
 800216e:	4313      	orrs	r3, r2
 8002170:	d051      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002178:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800217c:	d035      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800217e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002182:	d82e      	bhi.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002184:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002188:	d031      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x442>
 800218a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800218e:	d828      	bhi.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002190:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002194:	d01a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002196:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800219a:	d822      	bhi.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80021a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021a4:	d007      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80021a6:	e01c      	b.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021a8:	4b7e      	ldr	r3, [pc, #504]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ac:	4a7d      	ldr	r2, [pc, #500]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80021ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80021b4:	e01c      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80021b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80021ba:	3308      	adds	r3, #8
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 ff94 	bl	80030ec <RCCEx_PLL2_Config>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80021ca:	e011      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80021cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80021d0:	3328      	adds	r3, #40	@ 0x28
 80021d2:	2100      	movs	r1, #0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f001 f83b 	bl	8003250 <RCCEx_PLL3_Config>
 80021da:	4603      	mov	r3, r0
 80021dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80021e0:	e006      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80021e8:	e002      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80021ea:	bf00      	nop
 80021ec:	e000      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80021ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80021f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10a      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80021f8:	4b6a      	ldr	r3, [pc, #424]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80021fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021fc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002206:	4a67      	ldr	r2, [pc, #412]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002208:	430b      	orrs	r3, r1
 800220a:	6513      	str	r3, [r2, #80]	@ 0x50
 800220c:	e003      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800220e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002212:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002222:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002226:	2300      	movs	r3, #0
 8002228:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800222c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002230:	460b      	mov	r3, r1
 8002232:	4313      	orrs	r3, r2
 8002234:	d053      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800223a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800223c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002240:	d033      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8002242:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002246:	d82c      	bhi.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002248:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800224c:	d02f      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x502>
 800224e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002252:	d826      	bhi.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002254:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002258:	d02b      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800225a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800225e:	d820      	bhi.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002260:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002264:	d012      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8002266:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800226a:	d81a      	bhi.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800226c:	2b00      	cmp	r3, #0
 800226e:	d022      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002274:	d115      	bne.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800227a:	3308      	adds	r3, #8
 800227c:	2101      	movs	r1, #1
 800227e:	4618      	mov	r0, r3
 8002280:	f000 ff34 	bl	80030ec <RCCEx_PLL2_Config>
 8002284:	4603      	mov	r3, r0
 8002286:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800228a:	e015      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800228c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002290:	3328      	adds	r3, #40	@ 0x28
 8002292:	2101      	movs	r1, #1
 8002294:	4618      	mov	r0, r3
 8002296:	f000 ffdb 	bl	8003250 <RCCEx_PLL3_Config>
 800229a:	4603      	mov	r3, r0
 800229c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80022a0:	e00a      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80022a8:	e006      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80022aa:	bf00      	nop
 80022ac:	e004      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80022ae:	bf00      	nop
 80022b0:	e002      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80022b2:	bf00      	nop
 80022b4:	e000      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80022b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10a      	bne.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80022c0:	4b38      	ldr	r3, [pc, #224]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80022c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022c4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80022c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80022cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ce:	4a35      	ldr	r2, [pc, #212]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80022d0:	430b      	orrs	r3, r1
 80022d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80022d4:	e003      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80022da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80022de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80022e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80022ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80022ee:	2300      	movs	r3, #0
 80022f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80022f4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80022f8:	460b      	mov	r3, r1
 80022fa:	4313      	orrs	r3, r2
 80022fc:	d058      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80022fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002302:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002306:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800230a:	d033      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800230c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002310:	d82c      	bhi.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002316:	d02f      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800231c:	d826      	bhi.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800231e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002322:	d02b      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002324:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002328:	d820      	bhi.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800232a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800232e:	d012      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8002330:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002334:	d81a      	bhi.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002336:	2b00      	cmp	r3, #0
 8002338:	d022      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800233a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800233e:	d115      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002344:	3308      	adds	r3, #8
 8002346:	2101      	movs	r1, #1
 8002348:	4618      	mov	r0, r3
 800234a:	f000 fecf 	bl	80030ec <RCCEx_PLL2_Config>
 800234e:	4603      	mov	r3, r0
 8002350:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002354:	e015      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800235a:	3328      	adds	r3, #40	@ 0x28
 800235c:	2101      	movs	r1, #1
 800235e:	4618      	mov	r0, r3
 8002360:	f000 ff76 	bl	8003250 <RCCEx_PLL3_Config>
 8002364:	4603      	mov	r3, r0
 8002366:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800236a:	e00a      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002372:	e006      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002374:	bf00      	nop
 8002376:	e004      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002378:	bf00      	nop
 800237a:	e002      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800237c:	bf00      	nop
 800237e:	e000      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002382:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10e      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800238a:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800238c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002396:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800239a:	4a02      	ldr	r2, [pc, #8]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800239c:	430b      	orrs	r3, r1
 800239e:	6593      	str	r3, [r2, #88]	@ 0x58
 80023a0:	e006      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80023a2:	bf00      	nop
 80023a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80023ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80023b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80023bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80023c0:	2300      	movs	r3, #0
 80023c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80023c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4313      	orrs	r3, r2
 80023ce:	d037      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80023d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80023d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023da:	d00e      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80023dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023e0:	d816      	bhi.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d018      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80023e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023ea:	d111      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023ec:	4bc4      	ldr	r3, [pc, #784]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80023ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f0:	4ac3      	ldr	r2, [pc, #780]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80023f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80023f8:	e00f      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80023fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80023fe:	3308      	adds	r3, #8
 8002400:	2101      	movs	r1, #1
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fe72 	bl	80030ec <RCCEx_PLL2_Config>
 8002408:	4603      	mov	r3, r0
 800240a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800240e:	e004      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002416:	e000      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800241a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10a      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002422:	4bb7      	ldr	r3, [pc, #732]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002426:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800242a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800242e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002430:	4ab3      	ldr	r2, [pc, #716]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002432:	430b      	orrs	r3, r1
 8002434:	6513      	str	r3, [r2, #80]	@ 0x50
 8002436:	e003      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002438:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800243c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002448:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800244c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002450:	2300      	movs	r3, #0
 8002452:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002456:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800245a:	460b      	mov	r3, r1
 800245c:	4313      	orrs	r3, r2
 800245e:	d039      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002466:	2b03      	cmp	r3, #3
 8002468:	d81c      	bhi.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800246a:	a201      	add	r2, pc, #4	@ (adr r2, 8002470 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800246c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002470:	080024ad 	.word	0x080024ad
 8002474:	08002481 	.word	0x08002481
 8002478:	0800248f 	.word	0x0800248f
 800247c:	080024ad 	.word	0x080024ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002480:	4b9f      	ldr	r3, [pc, #636]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002484:	4a9e      	ldr	r2, [pc, #632]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002486:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800248a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800248c:	e00f      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800248e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002492:	3308      	adds	r3, #8
 8002494:	2102      	movs	r1, #2
 8002496:	4618      	mov	r0, r3
 8002498:	f000 fe28 	bl	80030ec <RCCEx_PLL2_Config>
 800249c:	4603      	mov	r3, r0
 800249e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80024a2:	e004      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80024aa:	e000      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80024ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10a      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80024b6:	4b92      	ldr	r3, [pc, #584]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ba:	f023 0103 	bic.w	r1, r3, #3
 80024be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80024c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024c4:	4a8e      	ldr	r2, [pc, #568]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80024c6:	430b      	orrs	r3, r1
 80024c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ca:	e003      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80024d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80024e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80024e4:	2300      	movs	r3, #0
 80024e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80024ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f000 8099 	beq.w	8002628 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024f6:	4b83      	ldr	r3, [pc, #524]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a82      	ldr	r2, [pc, #520]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80024fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002500:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002502:	f7fe fa39 	bl	8000978 <HAL_GetTick>
 8002506:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800250a:	e00b      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250c:	f7fe fa34 	bl	8000978 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b64      	cmp	r3, #100	@ 0x64
 800251a:	d903      	bls.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002522:	e005      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002524:	4b77      	ldr	r3, [pc, #476]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0ed      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002530:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002534:	2b00      	cmp	r3, #0
 8002536:	d173      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002538:	4b71      	ldr	r3, [pc, #452]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800253a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800253c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002540:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002544:	4053      	eors	r3, r2
 8002546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800254a:	2b00      	cmp	r3, #0
 800254c:	d015      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800254e:	4b6c      	ldr	r3, [pc, #432]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002552:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002556:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800255a:	4b69      	ldr	r3, [pc, #420]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255e:	4a68      	ldr	r2, [pc, #416]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002564:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002566:	4b66      	ldr	r3, [pc, #408]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800256a:	4a65      	ldr	r2, [pc, #404]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800256c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002570:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002572:	4a63      	ldr	r2, [pc, #396]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002574:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002578:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800257a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800257e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002586:	d118      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7fe f9f6 	bl	8000978 <HAL_GetTick>
 800258c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002590:	e00d      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe f9f1 	bl	8000978 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800259c:	1ad2      	subs	r2, r2, r3
 800259e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d903      	bls.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80025ac:	e005      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025ae:	4b54      	ldr	r3, [pc, #336]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0eb      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80025ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d129      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80025c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80025ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80025d2:	d10e      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80025d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80025dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80025e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80025e4:	091a      	lsrs	r2, r3, #4
 80025e6:	4b48      	ldr	r3, [pc, #288]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	4a45      	ldr	r2, [pc, #276]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80025ec:	430b      	orrs	r3, r1
 80025ee:	6113      	str	r3, [r2, #16]
 80025f0:	e005      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x852>
 80025f2:	4b43      	ldr	r3, [pc, #268]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	4a42      	ldr	r2, [pc, #264]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80025f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80025fc:	6113      	str	r3, [r2, #16]
 80025fe:	4b40      	ldr	r3, [pc, #256]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002600:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002606:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800260a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260e:	4a3c      	ldr	r2, [pc, #240]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002610:	430b      	orrs	r3, r1
 8002612:	6713      	str	r3, [r2, #112]	@ 0x70
 8002614:	e008      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002616:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800261a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800261e:	e003      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002620:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002624:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002630:	f002 0301 	and.w	r3, r2, #1
 8002634:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002638:	2300      	movs	r3, #0
 800263a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800263e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002642:	460b      	mov	r3, r1
 8002644:	4313      	orrs	r3, r2
 8002646:	f000 808f 	beq.w	8002768 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800264a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800264e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002650:	2b28      	cmp	r3, #40	@ 0x28
 8002652:	d871      	bhi.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002654:	a201      	add	r2, pc, #4	@ (adr r2, 800265c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265a:	bf00      	nop
 800265c:	08002741 	.word	0x08002741
 8002660:	08002739 	.word	0x08002739
 8002664:	08002739 	.word	0x08002739
 8002668:	08002739 	.word	0x08002739
 800266c:	08002739 	.word	0x08002739
 8002670:	08002739 	.word	0x08002739
 8002674:	08002739 	.word	0x08002739
 8002678:	08002739 	.word	0x08002739
 800267c:	0800270d 	.word	0x0800270d
 8002680:	08002739 	.word	0x08002739
 8002684:	08002739 	.word	0x08002739
 8002688:	08002739 	.word	0x08002739
 800268c:	08002739 	.word	0x08002739
 8002690:	08002739 	.word	0x08002739
 8002694:	08002739 	.word	0x08002739
 8002698:	08002739 	.word	0x08002739
 800269c:	08002723 	.word	0x08002723
 80026a0:	08002739 	.word	0x08002739
 80026a4:	08002739 	.word	0x08002739
 80026a8:	08002739 	.word	0x08002739
 80026ac:	08002739 	.word	0x08002739
 80026b0:	08002739 	.word	0x08002739
 80026b4:	08002739 	.word	0x08002739
 80026b8:	08002739 	.word	0x08002739
 80026bc:	08002741 	.word	0x08002741
 80026c0:	08002739 	.word	0x08002739
 80026c4:	08002739 	.word	0x08002739
 80026c8:	08002739 	.word	0x08002739
 80026cc:	08002739 	.word	0x08002739
 80026d0:	08002739 	.word	0x08002739
 80026d4:	08002739 	.word	0x08002739
 80026d8:	08002739 	.word	0x08002739
 80026dc:	08002741 	.word	0x08002741
 80026e0:	08002739 	.word	0x08002739
 80026e4:	08002739 	.word	0x08002739
 80026e8:	08002739 	.word	0x08002739
 80026ec:	08002739 	.word	0x08002739
 80026f0:	08002739 	.word	0x08002739
 80026f4:	08002739 	.word	0x08002739
 80026f8:	08002739 	.word	0x08002739
 80026fc:	08002741 	.word	0x08002741
 8002700:	58024400 	.word	0x58024400
 8002704:	58024800 	.word	0x58024800
 8002708:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800270c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002710:	3308      	adds	r3, #8
 8002712:	2101      	movs	r1, #1
 8002714:	4618      	mov	r0, r3
 8002716:	f000 fce9 	bl	80030ec <RCCEx_PLL2_Config>
 800271a:	4603      	mov	r3, r0
 800271c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002720:	e00f      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002726:	3328      	adds	r3, #40	@ 0x28
 8002728:	2101      	movs	r1, #1
 800272a:	4618      	mov	r0, r3
 800272c:	f000 fd90 	bl	8003250 <RCCEx_PLL3_Config>
 8002730:	4603      	mov	r3, r0
 8002732:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002736:	e004      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800273e:	e000      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002742:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10a      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800274a:	4bbf      	ldr	r3, [pc, #764]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800274c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002756:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002758:	4abb      	ldr	r2, [pc, #748]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800275a:	430b      	orrs	r3, r1
 800275c:	6553      	str	r3, [r2, #84]	@ 0x54
 800275e:	e003      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002760:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002764:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	f002 0302 	and.w	r3, r2, #2
 8002774:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002778:	2300      	movs	r3, #0
 800277a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800277e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002782:	460b      	mov	r3, r1
 8002784:	4313      	orrs	r3, r2
 8002786:	d041      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800278c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800278e:	2b05      	cmp	r3, #5
 8002790:	d824      	bhi.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8002792:	a201      	add	r2, pc, #4	@ (adr r2, 8002798 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8002794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002798:	080027e5 	.word	0x080027e5
 800279c:	080027b1 	.word	0x080027b1
 80027a0:	080027c7 	.word	0x080027c7
 80027a4:	080027e5 	.word	0x080027e5
 80027a8:	080027e5 	.word	0x080027e5
 80027ac:	080027e5 	.word	0x080027e5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80027b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027b4:	3308      	adds	r3, #8
 80027b6:	2101      	movs	r1, #1
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fc97 	bl	80030ec <RCCEx_PLL2_Config>
 80027be:	4603      	mov	r3, r0
 80027c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80027c4:	e00f      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80027c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027ca:	3328      	adds	r3, #40	@ 0x28
 80027cc:	2101      	movs	r1, #1
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 fd3e 	bl	8003250 <RCCEx_PLL3_Config>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80027da:	e004      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80027e2:	e000      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80027e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10a      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80027ee:	4b96      	ldr	r3, [pc, #600]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80027f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f2:	f023 0107 	bic.w	r1, r3, #7
 80027f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027fc:	4a92      	ldr	r2, [pc, #584]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80027fe:	430b      	orrs	r3, r1
 8002800:	6553      	str	r3, [r2, #84]	@ 0x54
 8002802:	e003      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002804:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002808:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800280c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	f002 0304 	and.w	r3, r2, #4
 8002818:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800281c:	2300      	movs	r3, #0
 800281e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002822:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002826:	460b      	mov	r3, r1
 8002828:	4313      	orrs	r3, r2
 800282a:	d044      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800282c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002834:	2b05      	cmp	r3, #5
 8002836:	d825      	bhi.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8002838:	a201      	add	r2, pc, #4	@ (adr r2, 8002840 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	0800288d 	.word	0x0800288d
 8002844:	08002859 	.word	0x08002859
 8002848:	0800286f 	.word	0x0800286f
 800284c:	0800288d 	.word	0x0800288d
 8002850:	0800288d 	.word	0x0800288d
 8002854:	0800288d 	.word	0x0800288d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800285c:	3308      	adds	r3, #8
 800285e:	2101      	movs	r1, #1
 8002860:	4618      	mov	r0, r3
 8002862:	f000 fc43 	bl	80030ec <RCCEx_PLL2_Config>
 8002866:	4603      	mov	r3, r0
 8002868:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800286c:	e00f      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800286e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002872:	3328      	adds	r3, #40	@ 0x28
 8002874:	2101      	movs	r1, #1
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fcea 	bl	8003250 <RCCEx_PLL3_Config>
 800287c:	4603      	mov	r3, r0
 800287e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002882:	e004      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800288a:	e000      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800288c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800288e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10b      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002896:	4b6c      	ldr	r3, [pc, #432]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289a:	f023 0107 	bic.w	r1, r3, #7
 800289e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a6:	4a68      	ldr	r2, [pc, #416]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80028a8:	430b      	orrs	r3, r1
 80028aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80028ac:	e003      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80028b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028be:	f002 0320 	and.w	r3, r2, #32
 80028c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80028c6:	2300      	movs	r3, #0
 80028c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80028cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4313      	orrs	r3, r2
 80028d4:	d055      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80028d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028e2:	d033      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80028e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028e8:	d82c      	bhi.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80028ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ee:	d02f      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80028f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028f4:	d826      	bhi.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80028f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80028fa:	d02b      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80028fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002900:	d820      	bhi.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002902:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002906:	d012      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8002908:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800290c:	d81a      	bhi.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800290e:	2b00      	cmp	r3, #0
 8002910:	d022      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8002912:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002916:	d115      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800291c:	3308      	adds	r3, #8
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fbe3 	bl	80030ec <RCCEx_PLL2_Config>
 8002926:	4603      	mov	r3, r0
 8002928:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800292c:	e015      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800292e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002932:	3328      	adds	r3, #40	@ 0x28
 8002934:	2102      	movs	r1, #2
 8002936:	4618      	mov	r0, r3
 8002938:	f000 fc8a 	bl	8003250 <RCCEx_PLL3_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002942:	e00a      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800294a:	e006      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800294c:	bf00      	nop
 800294e:	e004      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002950:	bf00      	nop
 8002952:	e002      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002954:	bf00      	nop
 8002956:	e000      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002958:	bf00      	nop
    }

    if (ret == HAL_OK)
 800295a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10b      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002962:	4b39      	ldr	r3, [pc, #228]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002966:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800296a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800296e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002972:	4a35      	ldr	r2, [pc, #212]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002974:	430b      	orrs	r3, r1
 8002976:	6553      	str	r3, [r2, #84]	@ 0x54
 8002978:	e003      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800297a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800297e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800298e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002992:	2300      	movs	r3, #0
 8002994:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002998:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800299c:	460b      	mov	r3, r1
 800299e:	4313      	orrs	r3, r2
 80029a0:	d058      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80029a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029aa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80029ae:	d033      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80029b0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80029b4:	d82c      	bhi.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80029b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ba:	d02f      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80029bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029c0:	d826      	bhi.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80029c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80029c6:	d02b      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80029c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80029cc:	d820      	bhi.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80029ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029d2:	d012      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80029d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029d8:	d81a      	bhi.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d022      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80029de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029e2:	d115      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029e8:	3308      	adds	r3, #8
 80029ea:	2100      	movs	r1, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 fb7d 	bl	80030ec <RCCEx_PLL2_Config>
 80029f2:	4603      	mov	r3, r0
 80029f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80029f8:	e015      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80029fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029fe:	3328      	adds	r3, #40	@ 0x28
 8002a00:	2102      	movs	r1, #2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 fc24 	bl	8003250 <RCCEx_PLL3_Config>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002a16:	e006      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8002a18:	bf00      	nop
 8002a1a:	e004      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8002a1c:	bf00      	nop
 8002a1e:	e002      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8002a20:	bf00      	nop
 8002a22:	e000      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8002a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10e      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a2e:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a32:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8002a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a3e:	4a02      	ldr	r2, [pc, #8]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002a40:	430b      	orrs	r3, r1
 8002a42:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a44:	e006      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8002a46:	bf00      	nop
 8002a48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002a50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002a60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002a6a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4313      	orrs	r3, r2
 8002a72:	d055      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a7c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002a80:	d033      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8002a82:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002a86:	d82c      	bhi.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8002a88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a8c:	d02f      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8002a8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a92:	d826      	bhi.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8002a94:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002a98:	d02b      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8002a9a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002a9e:	d820      	bhi.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8002aa0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002aa4:	d012      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8002aa6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002aaa:	d81a      	bhi.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d022      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8002ab0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ab4:	d115      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002aba:	3308      	adds	r3, #8
 8002abc:	2100      	movs	r1, #0
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fb14 	bl	80030ec <RCCEx_PLL2_Config>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002aca:	e015      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ad0:	3328      	adds	r3, #40	@ 0x28
 8002ad2:	2102      	movs	r1, #2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fbbb 	bl	8003250 <RCCEx_PLL3_Config>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002ae0:	e00a      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002ae8:	e006      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8002aea:	bf00      	nop
 8002aec:	e004      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8002aee:	bf00      	nop
 8002af0:	e002      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8002af2:	bf00      	nop
 8002af4:	e000      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8002af6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002af8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10b      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002b00:	4ba0      	ldr	r3, [pc, #640]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b04:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8002b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b10:	4a9c      	ldr	r2, [pc, #624]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002b12:	430b      	orrs	r3, r1
 8002b14:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b16:	e003      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002b1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8002b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b28:	f002 0308 	and.w	r3, r2, #8
 8002b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002b36:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	d01e      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8002b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b52:	3328      	adds	r3, #40	@ 0x28
 8002b54:	2102      	movs	r1, #2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fb7a 	bl	8003250 <RCCEx_PLL3_Config>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8002b68:	4b86      	ldr	r3, [pc, #536]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b78:	4a82      	ldr	r2, [pc, #520]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002b7a:	430b      	orrs	r3, r1
 8002b7c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b86:	f002 0310 	and.w	r3, r2, #16
 8002b8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002b94:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	d01e      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8002b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002baa:	d10c      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bb0:	3328      	adds	r3, #40	@ 0x28
 8002bb2:	2102      	movs	r1, #2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 fb4b 	bl	8003250 <RCCEx_PLL3_Config>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002bc6:	4b6f      	ldr	r3, [pc, #444]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bd6:	4a6b      	ldr	r2, [pc, #428]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8002be8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002bea:	2300      	movs	r3, #0
 8002bec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002bee:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	d03e      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8002bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002c00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c04:	d022      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8002c06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c0a:	d81b      	bhi.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8002c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c14:	d00b      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8002c16:	e015      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c1c:	3308      	adds	r3, #8
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fa63 	bl	80030ec <RCCEx_PLL2_Config>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002c2c:	e00f      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c32:	3328      	adds	r3, #40	@ 0x28
 8002c34:	2102      	movs	r1, #2
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 fb0a 	bl	8003250 <RCCEx_PLL3_Config>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002c42:	e004      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002c4a:	e000      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8002c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10b      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c56:	4b4b      	ldr	r3, [pc, #300]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002c66:	4a47      	ldr	r2, [pc, #284]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c6c:	e003      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8002c82:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c84:	2300      	movs	r3, #0
 8002c86:	677b      	str	r3, [r7, #116]	@ 0x74
 8002c88:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	d03b      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8002c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002c9e:	d01f      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8002ca0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002ca4:	d818      	bhi.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8002ca6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002caa:	d003      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8002cac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cb0:	d007      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8002cb2:	e011      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cb4:	4b33      	ldr	r3, [pc, #204]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb8:	4a32      	ldr	r2, [pc, #200]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8002cc0:	e00f      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cc6:	3328      	adds	r3, #40	@ 0x28
 8002cc8:	2101      	movs	r1, #1
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fac0 	bl	8003250 <RCCEx_PLL3_Config>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8002cd6:	e004      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002cde:	e000      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8002ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ce2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10b      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cea:	4b26      	ldr	r3, [pc, #152]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cfa:	4a22      	ldr	r2, [pc, #136]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	6553      	str	r3, [r2, #84]	@ 0x54
 8002d00:	e003      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d12:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8002d16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d18:	2300      	movs	r3, #0
 8002d1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d1c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8002d20:	460b      	mov	r3, r1
 8002d22:	4313      	orrs	r3, r2
 8002d24:	d034      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8002d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8002d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d34:	d007      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8002d36:	e011      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d38:	4b12      	ldr	r3, [pc, #72]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3c:	4a11      	ldr	r2, [pc, #68]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8002d44:	e00e      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d4a:	3308      	adds	r3, #8
 8002d4c:	2102      	movs	r1, #2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f9cc 	bl	80030ec <RCCEx_PLL2_Config>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8002d5a:	e003      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10d      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002d6c:	4b05      	ldr	r3, [pc, #20]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d70:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d7a:	4a02      	ldr	r2, [pc, #8]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d80:	e006      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8002d82:	bf00      	nop
 8002d84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d98:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8002d9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d9e:	2300      	movs	r3, #0
 8002da0:	667b      	str	r3, [r7, #100]	@ 0x64
 8002da2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8002da6:	460b      	mov	r3, r1
 8002da8:	4313      	orrs	r3, r2
 8002daa:	d00c      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002db0:	3328      	adds	r3, #40	@ 0x28
 8002db2:	2102      	movs	r1, #2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fa4b 	bl	8003250 <RCCEx_PLL3_Config>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8002dd2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002dd8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4313      	orrs	r3, r2
 8002de0:	d036      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8002de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002de6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002de8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002dec:	d018      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8002dee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002df2:	d811      	bhi.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8002df4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002df8:	d014      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8002dfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dfe:	d80b      	bhi.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d011      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8002e04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e08:	d106      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e0a:	4bb7      	ldr	r3, [pc, #732]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0e:	4ab6      	ldr	r2, [pc, #728]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8002e16:	e008      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002e1e:	e004      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8002e20:	bf00      	nop
 8002e22:	e002      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8002e24:	bf00      	nop
 8002e26:	e000      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8002e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10a      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e32:	4bad      	ldr	r3, [pc, #692]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e40:	4aa9      	ldr	r2, [pc, #676]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002e42:	430b      	orrs	r3, r1
 8002e44:	6553      	str	r3, [r2, #84]	@ 0x54
 8002e46:	e003      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e58:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8002e5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e5e:	2300      	movs	r3, #0
 8002e60:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e62:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8002e66:	460b      	mov	r3, r1
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	d009      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e6c:	4b9e      	ldr	r3, [pc, #632]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8002e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7a:	4a9b      	ldr	r2, [pc, #620]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e88:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8002e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e8e:	2300      	movs	r3, #0
 8002e90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e92:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8002e96:	460b      	mov	r3, r1
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	d009      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e9c:	4b92      	ldr	r3, [pc, #584]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ea0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8002ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ea8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002eaa:	4a8f      	ldr	r2, [pc, #572]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002eac:	430b      	orrs	r3, r1
 8002eae:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8002ebc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ec2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	d00e      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ecc:	4b86      	ldr	r3, [pc, #536]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	4a85      	ldr	r2, [pc, #532]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002ed2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002ed6:	6113      	str	r3, [r2, #16]
 8002ed8:	4b83      	ldr	r3, [pc, #524]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002eda:	6919      	ldr	r1, [r3, #16]
 8002edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ee0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002ee4:	4a80      	ldr	r2, [pc, #512]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002ee6:	430b      	orrs	r3, r1
 8002ee8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8002ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ef8:	2300      	movs	r3, #0
 8002efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002efc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8002f00:	460b      	mov	r3, r1
 8002f02:	4313      	orrs	r3, r2
 8002f04:	d009      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002f06:	4b78      	ldr	r3, [pc, #480]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f0a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f14:	4a74      	ldr	r2, [pc, #464]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002f16:	430b      	orrs	r3, r1
 8002f18:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f22:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8002f26:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f28:	2300      	movs	r3, #0
 8002f2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f2c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8002f30:	460b      	mov	r3, r1
 8002f32:	4313      	orrs	r3, r2
 8002f34:	d00a      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f36:	4b6c      	ldr	r3, [pc, #432]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8002f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f46:	4a68      	ldr	r2, [pc, #416]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8002f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f54:	2100      	movs	r1, #0
 8002f56:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f5e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8002f62:	460b      	mov	r3, r1
 8002f64:	4313      	orrs	r3, r2
 8002f66:	d011      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 f8bb 	bl	80030ec <RCCEx_PLL2_Config>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8002f7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8002f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f94:	2100      	movs	r1, #0
 8002f96:	6239      	str	r1, [r7, #32]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f9e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	d011      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fac:	3308      	adds	r3, #8
 8002fae:	2101      	movs	r1, #1
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 f89b 	bl	80030ec <RCCEx_PLL2_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8002fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002fc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8002fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	61b9      	str	r1, [r7, #24]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	d011      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fec:	3308      	adds	r3, #8
 8002fee:	2102      	movs	r1, #2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 f87b 	bl	80030ec <RCCEx_PLL2_Config>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8002ffc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003004:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003008:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800300c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	2100      	movs	r1, #0
 8003016:	6139      	str	r1, [r7, #16]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003022:	460b      	mov	r3, r1
 8003024:	4313      	orrs	r3, r2
 8003026:	d011      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800302c:	3328      	adds	r3, #40	@ 0x28
 800302e:	2100      	movs	r1, #0
 8003030:	4618      	mov	r0, r3
 8003032:	f000 f90d 	bl	8003250 <RCCEx_PLL3_Config>
 8003036:	4603      	mov	r3, r0
 8003038:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800303c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003044:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003048:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800304c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003054:	2100      	movs	r1, #0
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003062:	460b      	mov	r3, r1
 8003064:	4313      	orrs	r3, r2
 8003066:	d011      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800306c:	3328      	adds	r3, #40	@ 0x28
 800306e:	2101      	movs	r1, #1
 8003070:	4618      	mov	r0, r3
 8003072:	f000 f8ed 	bl	8003250 <RCCEx_PLL3_Config>
 8003076:	4603      	mov	r3, r0
 8003078:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800307c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003084:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003088:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800308c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	2100      	movs	r1, #0
 8003096:	6039      	str	r1, [r7, #0]
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	607b      	str	r3, [r7, #4]
 800309e:	e9d7 1200 	ldrd	r1, r2, [r7]
 80030a2:	460b      	mov	r3, r1
 80030a4:	4313      	orrs	r3, r2
 80030a6:	d011      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030ac:	3328      	adds	r3, #40	@ 0x28
 80030ae:	2102      	movs	r1, #2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 f8cd 	bl	8003250 <RCCEx_PLL3_Config>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80030bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80030cc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	e000      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
}
 80030da:	4618      	mov	r0, r3
 80030dc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80030e0:	46bd      	mov	sp, r7
 80030e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030e6:	bf00      	nop
 80030e8:	58024400 	.word	0x58024400

080030ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80030fa:	4b53      	ldr	r3, [pc, #332]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 80030fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	2b03      	cmp	r3, #3
 8003104:	d101      	bne.n	800310a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e099      	b.n	800323e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800310a:	4b4f      	ldr	r3, [pc, #316]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a4e      	ldr	r2, [pc, #312]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 8003110:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003114:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003116:	f7fd fc2f 	bl	8000978 <HAL_GetTick>
 800311a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800311c:	e008      	b.n	8003130 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800311e:	f7fd fc2b 	bl	8000978 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e086      	b.n	800323e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003130:	4b45      	ldr	r3, [pc, #276]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1f0      	bne.n	800311e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800313c:	4b42      	ldr	r3, [pc, #264]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 800313e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003140:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	031b      	lsls	r3, r3, #12
 800314a:	493f      	ldr	r1, [pc, #252]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 800314c:	4313      	orrs	r3, r2
 800314e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	3b01      	subs	r3, #1
 8003156:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	3b01      	subs	r3, #1
 8003160:	025b      	lsls	r3, r3, #9
 8003162:	b29b      	uxth	r3, r3
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	3b01      	subs	r3, #1
 800316c:	041b      	lsls	r3, r3, #16
 800316e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	3b01      	subs	r3, #1
 800317a:	061b      	lsls	r3, r3, #24
 800317c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003180:	4931      	ldr	r1, [pc, #196]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 8003182:	4313      	orrs	r3, r2
 8003184:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003186:	4b30      	ldr	r3, [pc, #192]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 8003188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	492d      	ldr	r1, [pc, #180]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 8003194:	4313      	orrs	r3, r2
 8003196:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003198:	4b2b      	ldr	r3, [pc, #172]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 800319a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319c:	f023 0220 	bic.w	r2, r3, #32
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	4928      	ldr	r1, [pc, #160]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80031aa:	4b27      	ldr	r3, [pc, #156]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 80031ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ae:	4a26      	ldr	r2, [pc, #152]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 80031b0:	f023 0310 	bic.w	r3, r3, #16
 80031b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80031b6:	4b24      	ldr	r3, [pc, #144]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 80031b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031ba:	4b24      	ldr	r3, [pc, #144]	@ (800324c <RCCEx_PLL2_Config+0x160>)
 80031bc:	4013      	ands	r3, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	69d2      	ldr	r2, [r2, #28]
 80031c2:	00d2      	lsls	r2, r2, #3
 80031c4:	4920      	ldr	r1, [pc, #128]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80031ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 80031cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 80031d0:	f043 0310 	orr.w	r3, r3, #16
 80031d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d106      	bne.n	80031ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80031dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 80031de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e0:	4a19      	ldr	r2, [pc, #100]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 80031e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80031e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80031e8:	e00f      	b.n	800320a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d106      	bne.n	80031fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80031f0:	4b15      	ldr	r3, [pc, #84]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 80031f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f4:	4a14      	ldr	r2, [pc, #80]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 80031f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80031fc:	e005      	b.n	800320a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80031fe:	4b12      	ldr	r3, [pc, #72]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 8003200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003202:	4a11      	ldr	r2, [pc, #68]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 8003204:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003208:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800320a:	4b0f      	ldr	r3, [pc, #60]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a0e      	ldr	r2, [pc, #56]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 8003210:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003216:	f7fd fbaf 	bl	8000978 <HAL_GetTick>
 800321a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800321c:	e008      	b.n	8003230 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800321e:	f7fd fbab 	bl	8000978 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e006      	b.n	800323e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003230:	4b05      	ldr	r3, [pc, #20]	@ (8003248 <RCCEx_PLL2_Config+0x15c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	58024400 	.word	0x58024400
 800324c:	ffff0007 	.word	0xffff0007

08003250 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800325e:	4b53      	ldr	r3, [pc, #332]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	2b03      	cmp	r3, #3
 8003268:	d101      	bne.n	800326e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e099      	b.n	80033a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800326e:	4b4f      	ldr	r3, [pc, #316]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a4e      	ldr	r2, [pc, #312]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003274:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003278:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800327a:	f7fd fb7d 	bl	8000978 <HAL_GetTick>
 800327e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003280:	e008      	b.n	8003294 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003282:	f7fd fb79 	bl	8000978 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e086      	b.n	80033a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003294:	4b45      	ldr	r3, [pc, #276]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f0      	bne.n	8003282 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80032a0:	4b42      	ldr	r3, [pc, #264]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 80032a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	051b      	lsls	r3, r3, #20
 80032ae:	493f      	ldr	r1, [pc, #252]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	3b01      	subs	r3, #1
 80032ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	025b      	lsls	r3, r3, #9
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	041b      	lsls	r3, r3, #16
 80032d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	3b01      	subs	r3, #1
 80032de:	061b      	lsls	r3, r3, #24
 80032e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80032e4:	4931      	ldr	r1, [pc, #196]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80032ea:	4b30      	ldr	r3, [pc, #192]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 80032ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	492d      	ldr	r1, [pc, #180]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80032fc:	4b2b      	ldr	r3, [pc, #172]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 80032fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003300:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	4928      	ldr	r1, [pc, #160]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 800330a:	4313      	orrs	r3, r2
 800330c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800330e:	4b27      	ldr	r3, [pc, #156]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003312:	4a26      	ldr	r2, [pc, #152]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003318:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800331a:	4b24      	ldr	r3, [pc, #144]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 800331c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800331e:	4b24      	ldr	r3, [pc, #144]	@ (80033b0 <RCCEx_PLL3_Config+0x160>)
 8003320:	4013      	ands	r3, r2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	69d2      	ldr	r2, [r2, #28]
 8003326:	00d2      	lsls	r2, r2, #3
 8003328:	4920      	ldr	r1, [pc, #128]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 800332a:	4313      	orrs	r3, r2
 800332c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800332e:	4b1f      	ldr	r3, [pc, #124]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003332:	4a1e      	ldr	r2, [pc, #120]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003338:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d106      	bne.n	800334e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003340:	4b1a      	ldr	r3, [pc, #104]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003344:	4a19      	ldr	r2, [pc, #100]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003346:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800334a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800334c:	e00f      	b.n	800336e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d106      	bne.n	8003362 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003354:	4b15      	ldr	r3, [pc, #84]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003358:	4a14      	ldr	r2, [pc, #80]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 800335a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800335e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003360:	e005      	b.n	800336e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003362:	4b12      	ldr	r3, [pc, #72]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003366:	4a11      	ldr	r2, [pc, #68]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003368:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800336c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800336e:	4b0f      	ldr	r3, [pc, #60]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a0e      	ldr	r2, [pc, #56]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800337a:	f7fd fafd 	bl	8000978 <HAL_GetTick>
 800337e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003380:	e008      	b.n	8003394 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003382:	f7fd faf9 	bl	8000978 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e006      	b.n	80033a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003394:	4b05      	ldr	r3, [pc, #20]	@ (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	58024400 	.word	0x58024400
 80033b0:	ffff0007 	.word	0xffff0007

080033b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e10f      	b.n	80035e6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a87      	ldr	r2, [pc, #540]	@ (80035f0 <HAL_SPI_Init+0x23c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00f      	beq.n	80033f6 <HAL_SPI_Init+0x42>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a86      	ldr	r2, [pc, #536]	@ (80035f4 <HAL_SPI_Init+0x240>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00a      	beq.n	80033f6 <HAL_SPI_Init+0x42>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a84      	ldr	r2, [pc, #528]	@ (80035f8 <HAL_SPI_Init+0x244>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d005      	beq.n	80033f6 <HAL_SPI_Init+0x42>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	2b0f      	cmp	r3, #15
 80033f0:	d901      	bls.n	80033f6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e0f7      	b.n	80035e6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fbbc 	bl	8003b74 <SPI_GetPacketSize>
 80033fc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a7b      	ldr	r2, [pc, #492]	@ (80035f0 <HAL_SPI_Init+0x23c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d00c      	beq.n	8003422 <HAL_SPI_Init+0x6e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a79      	ldr	r2, [pc, #484]	@ (80035f4 <HAL_SPI_Init+0x240>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d007      	beq.n	8003422 <HAL_SPI_Init+0x6e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a78      	ldr	r2, [pc, #480]	@ (80035f8 <HAL_SPI_Init+0x244>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d002      	beq.n	8003422 <HAL_SPI_Init+0x6e>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b08      	cmp	r3, #8
 8003420:	d811      	bhi.n	8003446 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003426:	4a72      	ldr	r2, [pc, #456]	@ (80035f0 <HAL_SPI_Init+0x23c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d009      	beq.n	8003440 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a70      	ldr	r2, [pc, #448]	@ (80035f4 <HAL_SPI_Init+0x240>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d004      	beq.n	8003440 <HAL_SPI_Init+0x8c>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a6f      	ldr	r2, [pc, #444]	@ (80035f8 <HAL_SPI_Init+0x244>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d104      	bne.n	800344a <HAL_SPI_Init+0x96>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b10      	cmp	r3, #16
 8003444:	d901      	bls.n	800344a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e0cd      	b.n	80035e6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7fd f8b8 	bl	80005d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8003486:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003490:	d119      	bne.n	80034c6 <HAL_SPI_Init+0x112>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800349a:	d103      	bne.n	80034a4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10c      	bne.n	80034c6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80034b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034b4:	d107      	bne.n	80034c6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80034c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00f      	beq.n	80034f2 <HAL_SPI_Init+0x13e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	2b06      	cmp	r3, #6
 80034d8:	d90b      	bls.n	80034f2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	e007      	b.n	8003502 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003500:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69da      	ldr	r2, [r3, #28]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350a:	431a      	orrs	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003514:	ea42 0103 	orr.w	r1, r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003562:	ea42 0103 	orr.w	r1, r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d113      	bne.n	80035a2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800358c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035a0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40013000 	.word	0x40013000
 80035f4:	40003800 	.word	0x40003800
 80035f8:	40003c00 	.word	0x40003c00

080035fc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af02      	add	r7, sp, #8
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	4613      	mov	r3, r2
 800360a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3320      	adds	r3, #32
 8003612:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003614:	f7fd f9b0 	bl	8000978 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d001      	beq.n	800362a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8003626:	2302      	movs	r3, #2
 8003628:	e1d1      	b.n	80039ce <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <HAL_SPI_Transmit+0x3a>
 8003630:	88fb      	ldrh	r3, [r7, #6]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e1c9      	b.n	80039ce <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_SPI_Transmit+0x4c>
 8003644:	2302      	movs	r3, #2
 8003646:	e1c2      	b.n	80039ce <HAL_SPI_Transmit+0x3d2>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2203      	movs	r2, #3
 8003654:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	88fa      	ldrh	r2, [r7, #6]
 800366a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	88fa      	ldrh	r2, [r7, #6]
 8003672:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80036a0:	d108      	bne.n	80036b4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	e009      	b.n	80036c8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80036c6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	4b96      	ldr	r3, [pc, #600]	@ (8003928 <HAL_SPI_Transmit+0x32c>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	88f9      	ldrh	r1, [r7, #6]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	430b      	orrs	r3, r1
 80036da:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036f4:	d107      	bne.n	8003706 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003704:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	2b0f      	cmp	r3, #15
 800370c:	d947      	bls.n	800379e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800370e:	e03f      	b.n	8003790 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b02      	cmp	r3, #2
 800371c:	d114      	bne.n	8003748 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372e:	1d1a      	adds	r2, r3, #4
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8003746:	e023      	b.n	8003790 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003748:	f7fd f916 	bl	8000978 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d803      	bhi.n	8003760 <HAL_SPI_Transmit+0x164>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800375e:	d102      	bne.n	8003766 <HAL_SPI_Transmit+0x16a>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d114      	bne.n	8003790 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f936 	bl	80039d8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003772:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e11e      	b.n	80039ce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1b9      	bne.n	8003710 <HAL_SPI_Transmit+0x114>
 800379c:	e0f1      	b.n	8003982 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	2b07      	cmp	r3, #7
 80037a4:	f240 80e6 	bls.w	8003974 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80037a8:	e05d      	b.n	8003866 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d132      	bne.n	800381e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d918      	bls.n	80037f6 <HAL_SPI_Transmit+0x1fa>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d014      	beq.n	80037f6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6812      	ldr	r2, [r2, #0]
 80037d6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037dc:	1d1a      	adds	r2, r3, #4
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	3b02      	subs	r3, #2
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80037f4:	e037      	b.n	8003866 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fa:	881a      	ldrh	r2, [r3, #0]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003804:	1c9a      	adds	r2, r3, #2
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800381c:	e023      	b.n	8003866 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800381e:	f7fd f8ab 	bl	8000978 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d803      	bhi.n	8003836 <HAL_SPI_Transmit+0x23a>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003834:	d102      	bne.n	800383c <HAL_SPI_Transmit+0x240>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d114      	bne.n	8003866 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f8cb 	bl	80039d8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003848:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e0b3      	b.n	80039ce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d19b      	bne.n	80037aa <HAL_SPI_Transmit+0x1ae>
 8003872:	e086      	b.n	8003982 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b02      	cmp	r3, #2
 8003880:	d154      	bne.n	800392c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b03      	cmp	r3, #3
 800388c:	d918      	bls.n	80038c0 <HAL_SPI_Transmit+0x2c4>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003892:	2b40      	cmp	r3, #64	@ 0x40
 8003894:	d914      	bls.n	80038c0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a6:	1d1a      	adds	r2, r3, #4
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b04      	subs	r3, #4
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80038be:	e059      	b.n	8003974 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d917      	bls.n	80038fc <HAL_SPI_Transmit+0x300>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d013      	beq.n	80038fc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d8:	881a      	ldrh	r2, [r3, #0]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e2:	1c9a      	adds	r2, r3, #2
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b02      	subs	r3, #2
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80038fa:	e03b      	b.n	8003974 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3320      	adds	r3, #32
 8003906:	7812      	ldrb	r2, [r2, #0]
 8003908:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8003926:	e025      	b.n	8003974 <HAL_SPI_Transmit+0x378>
 8003928:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800392c:	f7fd f824 	bl	8000978 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d803      	bhi.n	8003944 <HAL_SPI_Transmit+0x348>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003942:	d102      	bne.n	800394a <HAL_SPI_Transmit+0x34e>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d114      	bne.n	8003974 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f844 	bl	80039d8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003956:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e02c      	b.n	80039ce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	f47f af79 	bne.w	8003874 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2200      	movs	r2, #0
 800398a:	2108      	movs	r1, #8
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 f8c3 	bl	8003b18 <SPI_WaitOnFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d007      	beq.n	80039a8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800399e:	f043 0220 	orr.w	r2, r3, #32
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f815 	bl	80039d8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80039cc:	2300      	movs	r3, #0
  }
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop

080039d8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699a      	ldr	r2, [r3, #24]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0208 	orr.w	r2, r2, #8
 80039f6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699a      	ldr	r2, [r3, #24]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0210 	orr.w	r2, r2, #16
 8003a06:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0201 	bic.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6919      	ldr	r1, [r3, #16]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	4b3c      	ldr	r3, [pc, #240]	@ (8003b14 <SPI_CloseTransfer+0x13c>)
 8003a24:	400b      	ands	r3, r1
 8003a26:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8003a36:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d014      	beq.n	8003a6e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f003 0320 	and.w	r3, r3, #32
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00f      	beq.n	8003a6e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a54:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699a      	ldr	r2, [r3, #24]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0220 	orr.w	r2, r2, #32
 8003a6c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d014      	beq.n	8003aa4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00f      	beq.n	8003aa4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a8a:	f043 0204 	orr.w	r2, r3, #4
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003aa2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00f      	beq.n	8003ace <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ab4:	f043 0201 	orr.w	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	699a      	ldr	r2, [r3, #24]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003acc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00f      	beq.n	8003af8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ade:	f043 0208 	orr.w	r2, r3, #8
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003af6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	fffffc90 	.word	0xfffffc90

08003b18 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	4613      	mov	r3, r2
 8003b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8003b28:	e010      	b.n	8003b4c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b2a:	f7fc ff25 	bl	8000978 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d803      	bhi.n	8003b42 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b40:	d102      	bne.n	8003b48 <SPI_WaitOnFlagUntilTimeout+0x30>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e00f      	b.n	8003b6c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	4013      	ands	r3, r2
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	bf0c      	ite	eq
 8003b5c:	2301      	moveq	r3, #1
 8003b5e:	2300      	movne	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d0df      	beq.n	8003b2a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	3301      	adds	r3, #1
 8003b84:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	3307      	adds	r3, #7
 8003b92:	08db      	lsrs	r3, r3, #3
 8003b94:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <memset>:
 8003baa:	4402      	add	r2, r0
 8003bac:	4603      	mov	r3, r0
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d100      	bne.n	8003bb4 <memset+0xa>
 8003bb2:	4770      	bx	lr
 8003bb4:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb8:	e7f9      	b.n	8003bae <memset+0x4>
	...

08003bbc <__libc_init_array>:
 8003bbc:	b570      	push	{r4, r5, r6, lr}
 8003bbe:	4d0d      	ldr	r5, [pc, #52]	@ (8003bf4 <__libc_init_array+0x38>)
 8003bc0:	4c0d      	ldr	r4, [pc, #52]	@ (8003bf8 <__libc_init_array+0x3c>)
 8003bc2:	1b64      	subs	r4, r4, r5
 8003bc4:	10a4      	asrs	r4, r4, #2
 8003bc6:	2600      	movs	r6, #0
 8003bc8:	42a6      	cmp	r6, r4
 8003bca:	d109      	bne.n	8003be0 <__libc_init_array+0x24>
 8003bcc:	4d0b      	ldr	r5, [pc, #44]	@ (8003bfc <__libc_init_array+0x40>)
 8003bce:	4c0c      	ldr	r4, [pc, #48]	@ (8003c00 <__libc_init_array+0x44>)
 8003bd0:	f000 f818 	bl	8003c04 <_init>
 8003bd4:	1b64      	subs	r4, r4, r5
 8003bd6:	10a4      	asrs	r4, r4, #2
 8003bd8:	2600      	movs	r6, #0
 8003bda:	42a6      	cmp	r6, r4
 8003bdc:	d105      	bne.n	8003bea <__libc_init_array+0x2e>
 8003bde:	bd70      	pop	{r4, r5, r6, pc}
 8003be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be4:	4798      	blx	r3
 8003be6:	3601      	adds	r6, #1
 8003be8:	e7ee      	b.n	8003bc8 <__libc_init_array+0xc>
 8003bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bee:	4798      	blx	r3
 8003bf0:	3601      	adds	r6, #1
 8003bf2:	e7f2      	b.n	8003bda <__libc_init_array+0x1e>
 8003bf4:	08003c2c 	.word	0x08003c2c
 8003bf8:	08003c2c 	.word	0x08003c2c
 8003bfc:	08003c2c 	.word	0x08003c2c
 8003c00:	08003c30 	.word	0x08003c30

08003c04 <_init>:
 8003c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c06:	bf00      	nop
 8003c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0a:	bc08      	pop	{r3}
 8003c0c:	469e      	mov	lr, r3
 8003c0e:	4770      	bx	lr

08003c10 <_fini>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	bf00      	nop
 8003c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c16:	bc08      	pop	{r3}
 8003c18:	469e      	mov	lr, r3
 8003c1a:	4770      	bx	lr
