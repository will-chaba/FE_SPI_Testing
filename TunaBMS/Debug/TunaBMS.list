
TunaBMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000268c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002814  08002814  00003814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002844  08002844  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002844  08002844  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002844  08002844  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002844  08002844  00003844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002848  08002848  00003848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800284c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002858  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002858  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005d84  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001203  00000000  00000000  00009dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d0  00000000  00000000  0000afc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000450  00000000  00000000  0000b598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7ad  00000000  00000000  0000b9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000074d2  00000000  00000000  00026195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d5cd  00000000  00000000  0002d667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cac34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001660  00000000  00000000  000cac78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000cc2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080027fc 	.word	0x080027fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080027fc 	.word	0x080027fc

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

  uint8_t dataToSend = 2;
 80001ce:	2302      	movs	r3, #2
 80001d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 f9b3 	bl	800053c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f817 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f889 	bl	80002f0 <MX_GPIO_Init>
  MX_SPI2_Init();
 80001de:	f000 f84f 	bl	8000280 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  int input, output = 0;
 80001e2:	2300      	movs	r3, #0
 80001e4:	607b      	str	r3, [r7, #4]
  while (1)
  {
//	  HAL_SPI_Transmit(&hspi2, &dataToSend, 1, HAL_MAX_DELAY);
//	  HAL_Delay(500);

	  HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)&output, (uint8_t*)&input, sizeof(input), HAL_MAX_DELAY);
 80001e6:	f107 0208 	add.w	r2, r7, #8
 80001ea:	1d39      	adds	r1, r7, #4
 80001ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80001f0:	9300      	str	r3, [sp, #0]
 80001f2:	2304      	movs	r3, #4
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <main+0x3c>)
 80001f6:	f001 ff4e 	bl	8002096 <HAL_SPI_TransmitReceive>
	  output = input;
 80001fa:	68bb      	ldr	r3, [r7, #8]
 80001fc:	607b      	str	r3, [r7, #4]
	  HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)&output, (uint8_t*)&input, sizeof(input), HAL_MAX_DELAY);
 80001fe:	bf00      	nop
 8000200:	e7f1      	b.n	80001e6 <main+0x1e>
 8000202:	bf00      	nop
 8000204:	20000028 	.word	0x20000028

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b090      	sub	sp, #64	@ 0x40
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0318 	add.w	r3, r7, #24
 8000212:	2228      	movs	r2, #40	@ 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fac4 	bl	80027a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022a:	2302      	movs	r3, #2
 800022c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022e:	2301      	movs	r3, #1
 8000230:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000232:	2310      	movs	r3, #16
 8000234:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000236:	2300      	movs	r3, #0
 8000238:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023a:	f107 0318 	add.w	r3, r7, #24
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fc5a 	bl	8000af8 <HAL_RCC_OscConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800024a:	f000 f89d 	bl	8000388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024e:	230f      	movs	r3, #15
 8000250:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f001 fc84 	bl	8001b74 <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000272:	f000 f889 	bl	8000388 <Error_Handler>
  }
}
 8000276:	bf00      	nop
 8000278:	3740      	adds	r7, #64	@ 0x40
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000284:	4b18      	ldr	r3, [pc, #96]	@ (80002e8 <MX_SPI2_Init+0x68>)
 8000286:	4a19      	ldr	r2, [pc, #100]	@ (80002ec <MX_SPI2_Init+0x6c>)
 8000288:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800028a:	4b17      	ldr	r3, [pc, #92]	@ (80002e8 <MX_SPI2_Init+0x68>)
 800028c:	2200      	movs	r2, #0
 800028e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000290:	4b15      	ldr	r3, [pc, #84]	@ (80002e8 <MX_SPI2_Init+0x68>)
 8000292:	2200      	movs	r2, #0
 8000294:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000296:	4b14      	ldr	r3, [pc, #80]	@ (80002e8 <MX_SPI2_Init+0x68>)
 8000298:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800029c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800029e:	4b12      	ldr	r3, [pc, #72]	@ (80002e8 <MX_SPI2_Init+0x68>)
 80002a0:	2202      	movs	r2, #2
 80002a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80002a4:	4b10      	ldr	r3, [pc, #64]	@ (80002e8 <MX_SPI2_Init+0x68>)
 80002a6:	2201      	movs	r2, #1
 80002a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80002aa:	4b0f      	ldr	r3, [pc, #60]	@ (80002e8 <MX_SPI2_Init+0x68>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002b0:	4b0d      	ldr	r3, [pc, #52]	@ (80002e8 <MX_SPI2_Init+0x68>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80002b6:	4b0c      	ldr	r3, [pc, #48]	@ (80002e8 <MX_SPI2_Init+0x68>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002bc:	4b0a      	ldr	r3, [pc, #40]	@ (80002e8 <MX_SPI2_Init+0x68>)
 80002be:	2200      	movs	r2, #0
 80002c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80002c2:	4b09      	ldr	r3, [pc, #36]	@ (80002e8 <MX_SPI2_Init+0x68>)
 80002c4:	2207      	movs	r2, #7
 80002c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80002c8:	4b07      	ldr	r3, [pc, #28]	@ (80002e8 <MX_SPI2_Init+0x68>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80002ce:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <MX_SPI2_Init+0x68>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80002d4:	4804      	ldr	r0, [pc, #16]	@ (80002e8 <MX_SPI2_Init+0x68>)
 80002d6:	f001 fe33 	bl	8001f40 <HAL_SPI_Init>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 80002e0:	f000 f852 	bl	8000388 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000028 	.word	0x20000028
 80002ec:	40003800 	.word	0x40003800

080002f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b088      	sub	sp, #32
 80002f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f6:	f107 030c 	add.w	r3, r7, #12
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
 8000304:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000306:	4b1f      	ldr	r3, [pc, #124]	@ (8000384 <MX_GPIO_Init+0x94>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a1e      	ldr	r2, [pc, #120]	@ (8000384 <MX_GPIO_Init+0x94>)
 800030c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000310:	6153      	str	r3, [r2, #20]
 8000312:	4b1c      	ldr	r3, [pc, #112]	@ (8000384 <MX_GPIO_Init+0x94>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800031a:	60bb      	str	r3, [r7, #8]
 800031c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031e:	4b19      	ldr	r3, [pc, #100]	@ (8000384 <MX_GPIO_Init+0x94>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	4a18      	ldr	r2, [pc, #96]	@ (8000384 <MX_GPIO_Init+0x94>)
 8000324:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000328:	6153      	str	r3, [r2, #20]
 800032a:	4b16      	ldr	r3, [pc, #88]	@ (8000384 <MX_GPIO_Init+0x94>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000332:	607b      	str	r3, [r7, #4]
 8000334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000336:	4b13      	ldr	r3, [pc, #76]	@ (8000384 <MX_GPIO_Init+0x94>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a12      	ldr	r2, [pc, #72]	@ (8000384 <MX_GPIO_Init+0x94>)
 800033c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b10      	ldr	r3, [pc, #64]	@ (8000384 <MX_GPIO_Init+0x94>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800034a:	603b      	str	r3, [r7, #0]
 800034c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 800034e:	2200      	movs	r2, #0
 8000350:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000354:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000358:	f000 fbb6 	bl	8000ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 800035c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000360:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000362:	2301      	movs	r3, #1
 8000364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000366:	2302      	movs	r3, #2
 8000368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036a:	2300      	movs	r3, #0
 800036c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800036e:	f107 030c 	add.w	r3, r7, #12
 8000372:	4619      	mov	r1, r3
 8000374:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000378:	f000 fa2c 	bl	80007d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800037c:	bf00      	nop
 800037e:	3720      	adds	r7, #32
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40021000 	.word	0x40021000

08000388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800038c:	b672      	cpsid	i
}
 800038e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000390:	bf00      	nop
 8000392:	e7fd      	b.n	8000390 <Error_Handler+0x8>

08000394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800039a:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <HAL_MspInit+0x44>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	4a0e      	ldr	r2, [pc, #56]	@ (80003d8 <HAL_MspInit+0x44>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6193      	str	r3, [r2, #24]
 80003a6:	4b0c      	ldr	r3, [pc, #48]	@ (80003d8 <HAL_MspInit+0x44>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003b2:	4b09      	ldr	r3, [pc, #36]	@ (80003d8 <HAL_MspInit+0x44>)
 80003b4:	69db      	ldr	r3, [r3, #28]
 80003b6:	4a08      	ldr	r2, [pc, #32]	@ (80003d8 <HAL_MspInit+0x44>)
 80003b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003bc:	61d3      	str	r3, [r2, #28]
 80003be:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <HAL_MspInit+0x44>)
 80003c0:	69db      	ldr	r3, [r3, #28]
 80003c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003c6:	603b      	str	r3, [r7, #0]
 80003c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000

080003dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08a      	sub	sp, #40	@ 0x28
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e4:	f107 0314 	add.w	r3, r7, #20
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
 80003f0:	60da      	str	r2, [r3, #12]
 80003f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a17      	ldr	r2, [pc, #92]	@ (8000458 <HAL_SPI_MspInit+0x7c>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d128      	bne.n	8000450 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80003fe:	4b17      	ldr	r3, [pc, #92]	@ (800045c <HAL_SPI_MspInit+0x80>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	4a16      	ldr	r2, [pc, #88]	@ (800045c <HAL_SPI_MspInit+0x80>)
 8000404:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000408:	61d3      	str	r3, [r2, #28]
 800040a:	4b14      	ldr	r3, [pc, #80]	@ (800045c <HAL_SPI_MspInit+0x80>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000412:	613b      	str	r3, [r7, #16]
 8000414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000416:	4b11      	ldr	r3, [pc, #68]	@ (800045c <HAL_SPI_MspInit+0x80>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a10      	ldr	r2, [pc, #64]	@ (800045c <HAL_SPI_MspInit+0x80>)
 800041c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000420:	6153      	str	r3, [r2, #20]
 8000422:	4b0e      	ldr	r3, [pc, #56]	@ (800045c <HAL_SPI_MspInit+0x80>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800042e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000434:	2302      	movs	r3, #2
 8000436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	2300      	movs	r3, #0
 800043a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800043c:	2303      	movs	r3, #3
 800043e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000440:	2305      	movs	r3, #5
 8000442:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000444:	f107 0314 	add.w	r3, r7, #20
 8000448:	4619      	mov	r1, r3
 800044a:	4805      	ldr	r0, [pc, #20]	@ (8000460 <HAL_SPI_MspInit+0x84>)
 800044c:	f000 f9c2 	bl	80007d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000450:	bf00      	nop
 8000452:	3728      	adds	r7, #40	@ 0x28
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40003800 	.word	0x40003800
 800045c:	40021000 	.word	0x40021000
 8000460:	48000400 	.word	0x48000400

08000464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000468:	bf00      	nop
 800046a:	e7fd      	b.n	8000468 <NMI_Handler+0x4>

0800046c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <HardFault_Handler+0x4>

08000474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <MemManage_Handler+0x4>

0800047c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <BusFault_Handler+0x4>

08000484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000488:	bf00      	nop
 800048a:	e7fd      	b.n	8000488 <UsageFault_Handler+0x4>

0800048c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr

080004b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ba:	f000 f885 	bl	80005c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
	...

080004c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <SystemInit+0x20>)
 80004ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004ce:	4a05      	ldr	r2, [pc, #20]	@ (80004e4 <SystemInit+0x20>)
 80004d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	e000ed00 	.word	0xe000ed00

080004e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000520 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80004ec:	f7ff ffea 	bl	80004c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f0:	480c      	ldr	r0, [pc, #48]	@ (8000524 <LoopForever+0x6>)
  ldr r1, =_edata
 80004f2:	490d      	ldr	r1, [pc, #52]	@ (8000528 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f4:	4a0d      	ldr	r2, [pc, #52]	@ (800052c <LoopForever+0xe>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f8:	e002      	b.n	8000500 <LoopCopyDataInit>

080004fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fe:	3304      	adds	r3, #4

08000500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000504:	d3f9      	bcc.n	80004fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000506:	4a0a      	ldr	r2, [pc, #40]	@ (8000530 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000508:	4c0a      	ldr	r4, [pc, #40]	@ (8000534 <LoopForever+0x16>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800050c:	e001      	b.n	8000512 <LoopFillZerobss>

0800050e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000510:	3204      	adds	r2, #4

08000512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000514:	d3fb      	bcc.n	800050e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000516:	f002 f94d 	bl	80027b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800051a:	f7ff fe55 	bl	80001c8 <main>

0800051e <LoopForever>:

LoopForever:
    b LoopForever
 800051e:	e7fe      	b.n	800051e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000520:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000528:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800052c:	0800284c 	.word	0x0800284c
  ldr r2, =_sbss
 8000530:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000534:	20000090 	.word	0x20000090

08000538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000538:	e7fe      	b.n	8000538 <ADC1_2_IRQHandler>
	...

0800053c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000540:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <HAL_Init+0x28>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a07      	ldr	r2, [pc, #28]	@ (8000564 <HAL_Init+0x28>)
 8000546:	f043 0310 	orr.w	r3, r3, #16
 800054a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f90d 	bl	800076c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	200f      	movs	r0, #15
 8000554:	f000 f808 	bl	8000568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000558:	f7ff ff1c 	bl	8000394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40022000 	.word	0x40022000

08000568 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000570:	4b12      	ldr	r3, [pc, #72]	@ (80005bc <HAL_InitTick+0x54>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <HAL_InitTick+0x58>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4619      	mov	r1, r3
 800057a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800057e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000582:	fbb2 f3f3 	udiv	r3, r2, r3
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f917 	bl	80007ba <HAL_SYSTICK_Config>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
 8000594:	e00e      	b.n	80005b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b0f      	cmp	r3, #15
 800059a:	d80a      	bhi.n	80005b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800059c:	2200      	movs	r2, #0
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80005a4:	f000 f8ed 	bl	8000782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a8:	4a06      	ldr	r2, [pc, #24]	@ (80005c4 <HAL_InitTick+0x5c>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80005ae:	2300      	movs	r3, #0
 80005b0:	e000      	b.n	80005b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005b2:	2301      	movs	r3, #1
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000000 	.word	0x20000000
 80005c0:	20000008 	.word	0x20000008
 80005c4:	20000004 	.word	0x20000004

080005c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005cc:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <HAL_IncTick+0x20>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <HAL_IncTick+0x24>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4413      	add	r3, r2
 80005d8:	4a04      	ldr	r2, [pc, #16]	@ (80005ec <HAL_IncTick+0x24>)
 80005da:	6013      	str	r3, [r2, #0]
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000008 	.word	0x20000008
 80005ec:	2000008c 	.word	0x2000008c

080005f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80005f4:	4b03      	ldr	r3, [pc, #12]	@ (8000604 <HAL_GetTick+0x14>)
 80005f6:	681b      	ldr	r3, [r3, #0]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	2000008c 	.word	0x2000008c

08000608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f003 0307 	and.w	r3, r3, #7
 8000616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000618:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <__NVIC_SetPriorityGrouping+0x44>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000624:	4013      	ands	r3, r2
 8000626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000630:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063a:	4a04      	ldr	r2, [pc, #16]	@ (800064c <__NVIC_SetPriorityGrouping+0x44>)
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	60d3      	str	r3, [r2, #12]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000654:	4b04      	ldr	r3, [pc, #16]	@ (8000668 <__NVIC_GetPriorityGrouping+0x18>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	0a1b      	lsrs	r3, r3, #8
 800065a:	f003 0307 	and.w	r3, r3, #7
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	6039      	str	r1, [r7, #0]
 8000676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067c:	2b00      	cmp	r3, #0
 800067e:	db0a      	blt.n	8000696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	b2da      	uxtb	r2, r3
 8000684:	490c      	ldr	r1, [pc, #48]	@ (80006b8 <__NVIC_SetPriority+0x4c>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	0112      	lsls	r2, r2, #4
 800068c:	b2d2      	uxtb	r2, r2
 800068e:	440b      	add	r3, r1
 8000690:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000694:	e00a      	b.n	80006ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4908      	ldr	r1, [pc, #32]	@ (80006bc <__NVIC_SetPriority+0x50>)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 030f 	and.w	r3, r3, #15
 80006a2:	3b04      	subs	r3, #4
 80006a4:	0112      	lsls	r2, r2, #4
 80006a6:	b2d2      	uxtb	r2, r2
 80006a8:	440b      	add	r3, r1
 80006aa:	761a      	strb	r2, [r3, #24]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000e100 	.word	0xe000e100
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b089      	sub	sp, #36	@ 0x24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	f1c3 0307 	rsb	r3, r3, #7
 80006da:	2b04      	cmp	r3, #4
 80006dc:	bf28      	it	cs
 80006de:	2304      	movcs	r3, #4
 80006e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3304      	adds	r3, #4
 80006e6:	2b06      	cmp	r3, #6
 80006e8:	d902      	bls.n	80006f0 <NVIC_EncodePriority+0x30>
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	3b03      	subs	r3, #3
 80006ee:	e000      	b.n	80006f2 <NVIC_EncodePriority+0x32>
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	43da      	mvns	r2, r3
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	401a      	ands	r2, r3
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000708:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	43d9      	mvns	r1, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	4313      	orrs	r3, r2
         );
}
 800071a:	4618      	mov	r0, r3
 800071c:	3724      	adds	r7, #36	@ 0x24
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
	...

08000728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3b01      	subs	r3, #1
 8000734:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000738:	d301      	bcc.n	800073e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800073a:	2301      	movs	r3, #1
 800073c:	e00f      	b.n	800075e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800073e:	4a0a      	ldr	r2, [pc, #40]	@ (8000768 <SysTick_Config+0x40>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3b01      	subs	r3, #1
 8000744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000746:	210f      	movs	r1, #15
 8000748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800074c:	f7ff ff8e 	bl	800066c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000750:	4b05      	ldr	r3, [pc, #20]	@ (8000768 <SysTick_Config+0x40>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000756:	4b04      	ldr	r3, [pc, #16]	@ (8000768 <SysTick_Config+0x40>)
 8000758:	2207      	movs	r2, #7
 800075a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	e000e010 	.word	0xe000e010

0800076c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ff47 	bl	8000608 <__NVIC_SetPriorityGrouping>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b086      	sub	sp, #24
 8000786:	af00      	add	r7, sp, #0
 8000788:	4603      	mov	r3, r0
 800078a:	60b9      	str	r1, [r7, #8]
 800078c:	607a      	str	r2, [r7, #4]
 800078e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000794:	f7ff ff5c 	bl	8000650 <__NVIC_GetPriorityGrouping>
 8000798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	68b9      	ldr	r1, [r7, #8]
 800079e:	6978      	ldr	r0, [r7, #20]
 80007a0:	f7ff ff8e 	bl	80006c0 <NVIC_EncodePriority>
 80007a4:	4602      	mov	r2, r0
 80007a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff5d 	bl	800066c <__NVIC_SetPriority>
}
 80007b2:	bf00      	nop
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ffb0 	bl	8000728 <SysTick_Config>
 80007c8:	4603      	mov	r3, r0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b087      	sub	sp, #28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007e2:	e154      	b.n	8000a8e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	2101      	movs	r1, #1
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	fa01 f303 	lsl.w	r3, r1, r3
 80007f0:	4013      	ands	r3, r2
 80007f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	f000 8146 	beq.w	8000a88 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	f003 0303 	and.w	r3, r3, #3
 8000804:	2b01      	cmp	r3, #1
 8000806:	d005      	beq.n	8000814 <HAL_GPIO_Init+0x40>
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	f003 0303 	and.w	r3, r3, #3
 8000810:	2b02      	cmp	r3, #2
 8000812:	d130      	bne.n	8000876 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	2203      	movs	r2, #3
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	43db      	mvns	r3, r3
 8000826:	693a      	ldr	r2, [r7, #16]
 8000828:	4013      	ands	r3, r2
 800082a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	693a      	ldr	r2, [r7, #16]
 800083a:	4313      	orrs	r3, r2
 800083c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800084a:	2201      	movs	r2, #1
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	43db      	mvns	r3, r3
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	4013      	ands	r3, r2
 8000858:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	091b      	lsrs	r3, r3, #4
 8000860:	f003 0201 	and.w	r2, r3, #1
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	4313      	orrs	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	f003 0303 	and.w	r3, r3, #3
 800087e:	2b03      	cmp	r3, #3
 8000880:	d017      	beq.n	80008b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	2203      	movs	r2, #3
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43db      	mvns	r3, r3
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	4013      	ands	r3, r2
 8000898:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	689a      	ldr	r2, [r3, #8]
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f003 0303 	and.w	r3, r3, #3
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d123      	bne.n	8000906 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	08da      	lsrs	r2, r3, #3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3208      	adds	r2, #8
 80008c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	220f      	movs	r2, #15
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	4013      	ands	r3, r2
 80008e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	691a      	ldr	r2, [r3, #16]
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	f003 0307 	and.w	r3, r3, #7
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	08da      	lsrs	r2, r3, #3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3208      	adds	r2, #8
 8000900:	6939      	ldr	r1, [r7, #16]
 8000902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	2203      	movs	r2, #3
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	43db      	mvns	r3, r3
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	4013      	ands	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f003 0203 	and.w	r2, r3, #3
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4313      	orrs	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000942:	2b00      	cmp	r3, #0
 8000944:	f000 80a0 	beq.w	8000a88 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000948:	4b58      	ldr	r3, [pc, #352]	@ (8000aac <HAL_GPIO_Init+0x2d8>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a57      	ldr	r2, [pc, #348]	@ (8000aac <HAL_GPIO_Init+0x2d8>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b55      	ldr	r3, [pc, #340]	@ (8000aac <HAL_GPIO_Init+0x2d8>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000960:	4a53      	ldr	r2, [pc, #332]	@ (8000ab0 <HAL_GPIO_Init+0x2dc>)
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	089b      	lsrs	r3, r3, #2
 8000966:	3302      	adds	r3, #2
 8000968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	f003 0303 	and.w	r3, r3, #3
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	220f      	movs	r2, #15
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	43db      	mvns	r3, r3
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	4013      	ands	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800098a:	d019      	beq.n	80009c0 <HAL_GPIO_Init+0x1ec>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a49      	ldr	r2, [pc, #292]	@ (8000ab4 <HAL_GPIO_Init+0x2e0>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d013      	beq.n	80009bc <HAL_GPIO_Init+0x1e8>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a48      	ldr	r2, [pc, #288]	@ (8000ab8 <HAL_GPIO_Init+0x2e4>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d00d      	beq.n	80009b8 <HAL_GPIO_Init+0x1e4>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a47      	ldr	r2, [pc, #284]	@ (8000abc <HAL_GPIO_Init+0x2e8>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d007      	beq.n	80009b4 <HAL_GPIO_Init+0x1e0>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a46      	ldr	r2, [pc, #280]	@ (8000ac0 <HAL_GPIO_Init+0x2ec>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d101      	bne.n	80009b0 <HAL_GPIO_Init+0x1dc>
 80009ac:	2304      	movs	r3, #4
 80009ae:	e008      	b.n	80009c2 <HAL_GPIO_Init+0x1ee>
 80009b0:	2305      	movs	r3, #5
 80009b2:	e006      	b.n	80009c2 <HAL_GPIO_Init+0x1ee>
 80009b4:	2303      	movs	r3, #3
 80009b6:	e004      	b.n	80009c2 <HAL_GPIO_Init+0x1ee>
 80009b8:	2302      	movs	r3, #2
 80009ba:	e002      	b.n	80009c2 <HAL_GPIO_Init+0x1ee>
 80009bc:	2301      	movs	r3, #1
 80009be:	e000      	b.n	80009c2 <HAL_GPIO_Init+0x1ee>
 80009c0:	2300      	movs	r3, #0
 80009c2:	697a      	ldr	r2, [r7, #20]
 80009c4:	f002 0203 	and.w	r2, r2, #3
 80009c8:	0092      	lsls	r2, r2, #2
 80009ca:	4093      	lsls	r3, r2
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009d2:	4937      	ldr	r1, [pc, #220]	@ (8000ab0 <HAL_GPIO_Init+0x2dc>)
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	089b      	lsrs	r3, r3, #2
 80009d8:	3302      	adds	r3, #2
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009e0:	4b38      	ldr	r3, [pc, #224]	@ (8000ac4 <HAL_GPIO_Init+0x2f0>)
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	43db      	mvns	r3, r3
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	4013      	ands	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d003      	beq.n	8000a04 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a04:	4a2f      	ldr	r2, [pc, #188]	@ (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	43db      	mvns	r3, r3
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4013      	ands	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d003      	beq.n	8000a2e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a2e:	4a25      	ldr	r2, [pc, #148]	@ (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a34:	4b23      	ldr	r3, [pc, #140]	@ (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d003      	beq.n	8000a58 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a58:	4a1a      	ldr	r2, [pc, #104]	@ (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	43db      	mvns	r3, r3
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d003      	beq.n	8000a82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a82:	4a10      	ldr	r2, [pc, #64]	@ (8000ac4 <HAL_GPIO_Init+0x2f0>)
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	fa22 f303 	lsr.w	r3, r2, r3
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	f47f aea3 	bne.w	80007e4 <HAL_GPIO_Init+0x10>
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	371c      	adds	r7, #28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010000 	.word	0x40010000
 8000ab4:	48000400 	.word	0x48000400
 8000ab8:	48000800 	.word	0x48000800
 8000abc:	48000c00 	.word	0x48000c00
 8000ac0:	48001000 	.word	0x48001000
 8000ac4:	40010400 	.word	0x40010400

08000ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	807b      	strh	r3, [r7, #2]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ad8:	787b      	ldrb	r3, [r7, #1]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ade:	887a      	ldrh	r2, [r7, #2]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ae4:	e002      	b.n	8000aec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ae6:	887a      	ldrh	r2, [r7, #2]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b08:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	f001 b823 	b.w	8001b64 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f000 817d 	beq.w	8000e2e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b34:	4bbc      	ldr	r3, [pc, #752]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f003 030c 	and.w	r3, r3, #12
 8000b3c:	2b04      	cmp	r3, #4
 8000b3e:	d00c      	beq.n	8000b5a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b40:	4bb9      	ldr	r3, [pc, #740]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f003 030c 	and.w	r3, r3, #12
 8000b48:	2b08      	cmp	r3, #8
 8000b4a:	d15c      	bne.n	8000c06 <HAL_RCC_OscConfig+0x10e>
 8000b4c:	4bb6      	ldr	r3, [pc, #728]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b58:	d155      	bne.n	8000c06 <HAL_RCC_OscConfig+0x10e>
 8000b5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000b5e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b62:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000b66:	fa93 f3a3 	rbit	r3, r3
 8000b6a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b6e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b72:	fab3 f383 	clz	r3, r3
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	095b      	lsrs	r3, r3, #5
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d102      	bne.n	8000b8c <HAL_RCC_OscConfig+0x94>
 8000b86:	4ba8      	ldr	r3, [pc, #672]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	e015      	b.n	8000bb8 <HAL_RCC_OscConfig+0xc0>
 8000b8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000b90:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b94:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000b98:	fa93 f3a3 	rbit	r3, r3
 8000b9c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000ba0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ba4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000ba8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000bac:	fa93 f3a3 	rbit	r3, r3
 8000bb0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000bb4:	4b9c      	ldr	r3, [pc, #624]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bb8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000bbc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000bc0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000bc4:	fa92 f2a2 	rbit	r2, r2
 8000bc8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000bcc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	f042 0220 	orr.w	r2, r2, #32
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	f002 021f 	and.w	r2, r2, #31
 8000be0:	2101      	movs	r1, #1
 8000be2:	fa01 f202 	lsl.w	r2, r1, r2
 8000be6:	4013      	ands	r3, r2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	f000 811f 	beq.w	8000e2c <HAL_RCC_OscConfig+0x334>
 8000bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000bf2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f040 8116 	bne.w	8000e2c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	f000 bfaf 	b.w	8001b64 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c16:	d106      	bne.n	8000c26 <HAL_RCC_OscConfig+0x12e>
 8000c18:	4b83      	ldr	r3, [pc, #524]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a82      	ldr	r2, [pc, #520]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000c1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	e036      	b.n	8000c94 <HAL_RCC_OscConfig+0x19c>
 8000c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d10c      	bne.n	8000c50 <HAL_RCC_OscConfig+0x158>
 8000c36:	4b7c      	ldr	r3, [pc, #496]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a7b      	ldr	r2, [pc, #492]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000c3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	4b79      	ldr	r3, [pc, #484]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a78      	ldr	r2, [pc, #480]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000c48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	e021      	b.n	8000c94 <HAL_RCC_OscConfig+0x19c>
 8000c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c60:	d10c      	bne.n	8000c7c <HAL_RCC_OscConfig+0x184>
 8000c62:	4b71      	ldr	r3, [pc, #452]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a70      	ldr	r2, [pc, #448]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000c68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	4b6e      	ldr	r3, [pc, #440]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a6d      	ldr	r2, [pc, #436]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c78:	6013      	str	r3, [r2, #0]
 8000c7a:	e00b      	b.n	8000c94 <HAL_RCC_OscConfig+0x19c>
 8000c7c:	4b6a      	ldr	r3, [pc, #424]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a69      	ldr	r2, [pc, #420]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000c82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	4b67      	ldr	r3, [pc, #412]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a66      	ldr	r2, [pc, #408]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000c8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c92:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c94:	4b64      	ldr	r3, [pc, #400]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c98:	f023 020f 	bic.w	r2, r3, #15
 8000c9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ca0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	495f      	ldr	r1, [pc, #380]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000caa:	4313      	orrs	r3, r2
 8000cac:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cb2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d059      	beq.n	8000d72 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cbe:	f7ff fc97 	bl	80005f0 <HAL_GetTick>
 8000cc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc6:	e00a      	b.n	8000cde <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cc8:	f7ff fc92 	bl	80005f0 <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	2b64      	cmp	r3, #100	@ 0x64
 8000cd6:	d902      	bls.n	8000cde <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	f000 bf43 	b.w	8001b64 <HAL_RCC_OscConfig+0x106c>
 8000cde:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ce2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000cea:	fa93 f3a3 	rbit	r3, r3
 8000cee:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000cf2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf6:	fab3 f383 	clz	r3, r3
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	095b      	lsrs	r3, r3, #5
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d102      	bne.n	8000d10 <HAL_RCC_OscConfig+0x218>
 8000d0a:	4b47      	ldr	r3, [pc, #284]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	e015      	b.n	8000d3c <HAL_RCC_OscConfig+0x244>
 8000d10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d14:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d18:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000d1c:	fa93 f3a3 	rbit	r3, r3
 8000d20:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000d24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d28:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000d2c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000d30:	fa93 f3a3 	rbit	r3, r3
 8000d34:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000d38:	4b3b      	ldr	r3, [pc, #236]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d3c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d40:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000d44:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000d48:	fa92 f2a2 	rbit	r2, r2
 8000d4c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000d50:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000d54:	fab2 f282 	clz	r2, r2
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	f042 0220 	orr.w	r2, r2, #32
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	f002 021f 	and.w	r2, r2, #31
 8000d64:	2101      	movs	r1, #1
 8000d66:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d0ab      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x1d0>
 8000d70:	e05d      	b.n	8000e2e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d72:	f7ff fc3d 	bl	80005f0 <HAL_GetTick>
 8000d76:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d7a:	e00a      	b.n	8000d92 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d7c:	f7ff fc38 	bl	80005f0 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	2b64      	cmp	r3, #100	@ 0x64
 8000d8a:	d902      	bls.n	8000d92 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	f000 bee9 	b.w	8001b64 <HAL_RCC_OscConfig+0x106c>
 8000d92:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d96:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000d9e:	fa93 f3a3 	rbit	r3, r3
 8000da2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8000da6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000daa:	fab3 f383 	clz	r3, r3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	095b      	lsrs	r3, r3, #5
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d102      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x2cc>
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	e015      	b.n	8000df0 <HAL_RCC_OscConfig+0x2f8>
 8000dc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dc8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dcc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000dd0:	fa93 f3a3 	rbit	r3, r3
 8000dd4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000dd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ddc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000de0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000de4:	fa93 f3a3 	rbit	r3, r3
 8000de8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000dec:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <HAL_RCC_OscConfig+0x330>)
 8000dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000df4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8000df8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000dfc:	fa92 f2a2 	rbit	r2, r2
 8000e00:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8000e04:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	f042 0220 	orr.w	r2, r2, #32
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	f002 021f 	and.w	r2, r2, #31
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1e:	4013      	ands	r3, r2
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1ab      	bne.n	8000d7c <HAL_RCC_OscConfig+0x284>
 8000e24:	e003      	b.n	8000e2e <HAL_RCC_OscConfig+0x336>
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 817d 	beq.w	800113e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e44:	4ba6      	ldr	r3, [pc, #664]	@ (80010e0 <HAL_RCC_OscConfig+0x5e8>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 030c 	and.w	r3, r3, #12
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d00b      	beq.n	8000e68 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e50:	4ba3      	ldr	r3, [pc, #652]	@ (80010e0 <HAL_RCC_OscConfig+0x5e8>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 030c 	and.w	r3, r3, #12
 8000e58:	2b08      	cmp	r3, #8
 8000e5a:	d172      	bne.n	8000f42 <HAL_RCC_OscConfig+0x44a>
 8000e5c:	4ba0      	ldr	r3, [pc, #640]	@ (80010e0 <HAL_RCC_OscConfig+0x5e8>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d16c      	bne.n	8000f42 <HAL_RCC_OscConfig+0x44a>
 8000e68:	2302      	movs	r3, #2
 8000e6a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000e72:	fa93 f3a3 	rbit	r3, r3
 8000e76:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8000e7a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e7e:	fab3 f383 	clz	r3, r3
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	095b      	lsrs	r3, r3, #5
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d102      	bne.n	8000e98 <HAL_RCC_OscConfig+0x3a0>
 8000e92:	4b93      	ldr	r3, [pc, #588]	@ (80010e0 <HAL_RCC_OscConfig+0x5e8>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	e013      	b.n	8000ec0 <HAL_RCC_OscConfig+0x3c8>
 8000e98:	2302      	movs	r3, #2
 8000e9a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8000ea2:	fa93 f3a3 	rbit	r3, r3
 8000ea6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000eaa:	2302      	movs	r3, #2
 8000eac:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000eb0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8000eb4:	fa93 f3a3 	rbit	r3, r3
 8000eb8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8000ebc:	4b88      	ldr	r3, [pc, #544]	@ (80010e0 <HAL_RCC_OscConfig+0x5e8>)
 8000ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8000ec6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000eca:	fa92 f2a2 	rbit	r2, r2
 8000ece:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8000ed2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8000ed6:	fab2 f282 	clz	r2, r2
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	f042 0220 	orr.w	r2, r2, #32
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	f002 021f 	and.w	r2, r2, #31
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8000eec:	4013      	ands	r3, r2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d00a      	beq.n	8000f08 <HAL_RCC_OscConfig+0x410>
 8000ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ef6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d002      	beq.n	8000f08 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	f000 be2e 	b.w	8001b64 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f08:	4b75      	ldr	r3, [pc, #468]	@ (80010e0 <HAL_RCC_OscConfig+0x5e8>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	21f8      	movs	r1, #248	@ 0xf8
 8000f1e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f22:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8000f26:	fa91 f1a1 	rbit	r1, r1
 8000f2a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8000f2e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8000f32:	fab1 f181 	clz	r1, r1
 8000f36:	b2c9      	uxtb	r1, r1
 8000f38:	408b      	lsls	r3, r1
 8000f3a:	4969      	ldr	r1, [pc, #420]	@ (80010e0 <HAL_RCC_OscConfig+0x5e8>)
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f40:	e0fd      	b.n	800113e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 8088 	beq.w	8001064 <HAL_RCC_OscConfig+0x56c>
 8000f54:	2301      	movs	r3, #1
 8000f56:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8000f5e:	fa93 f3a3 	rbit	r3, r3
 8000f62:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8000f66:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f6a:	fab3 f383 	clz	r3, r3
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000f74:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f80:	f7ff fb36 	bl	80005f0 <HAL_GetTick>
 8000f84:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f88:	e00a      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f8a:	f7ff fb31 	bl	80005f0 <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d902      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	f000 bde2 	b.w	8001b64 <HAL_RCC_OscConfig+0x106c>
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000faa:	fa93 f3a3 	rbit	r3, r3
 8000fae:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8000fb2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb6:	fab3 f383 	clz	r3, r3
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	095b      	lsrs	r3, r3, #5
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d102      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x4d8>
 8000fca:	4b45      	ldr	r3, [pc, #276]	@ (80010e0 <HAL_RCC_OscConfig+0x5e8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	e013      	b.n	8000ff8 <HAL_RCC_OscConfig+0x500>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000fda:	fa93 f3a3 	rbit	r3, r3
 8000fde:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8000fe8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8000fec:	fa93 f3a3 	rbit	r3, r3
 8000ff0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8000ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80010e0 <HAL_RCC_OscConfig+0x5e8>)
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8000ffe:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001002:	fa92 f2a2 	rbit	r2, r2
 8001006:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800100a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800100e:	fab2 f282 	clz	r2, r2
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	f042 0220 	orr.w	r2, r2, #32
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	f002 021f 	and.w	r2, r2, #31
 800101e:	2101      	movs	r1, #1
 8001020:	fa01 f202 	lsl.w	r2, r1, r2
 8001024:	4013      	ands	r3, r2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0af      	beq.n	8000f8a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800102a:	4b2d      	ldr	r3, [pc, #180]	@ (80010e0 <HAL_RCC_OscConfig+0x5e8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001036:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	21f8      	movs	r1, #248	@ 0xf8
 8001040:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001044:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001048:	fa91 f1a1 	rbit	r1, r1
 800104c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001050:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001054:	fab1 f181 	clz	r1, r1
 8001058:	b2c9      	uxtb	r1, r1
 800105a:	408b      	lsls	r3, r1
 800105c:	4920      	ldr	r1, [pc, #128]	@ (80010e0 <HAL_RCC_OscConfig+0x5e8>)
 800105e:	4313      	orrs	r3, r2
 8001060:	600b      	str	r3, [r1, #0]
 8001062:	e06c      	b.n	800113e <HAL_RCC_OscConfig+0x646>
 8001064:	2301      	movs	r3, #1
 8001066:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001076:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800107a:	fab3 f383 	clz	r3, r3
 800107e:	b2db      	uxtb	r3, r3
 8001080:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001084:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	461a      	mov	r2, r3
 800108c:	2300      	movs	r3, #0
 800108e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001090:	f7ff faae 	bl	80005f0 <HAL_GetTick>
 8001094:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001098:	e00a      	b.n	80010b0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800109a:	f7ff faa9 	bl	80005f0 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d902      	bls.n	80010b0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	f000 bd5a 	b.w	8001b64 <HAL_RCC_OscConfig+0x106c>
 80010b0:	2302      	movs	r3, #2
 80010b2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80010ba:	fa93 f3a3 	rbit	r3, r3
 80010be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80010c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c6:	fab3 f383 	clz	r3, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	095b      	lsrs	r3, r3, #5
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d104      	bne.n	80010e4 <HAL_RCC_OscConfig+0x5ec>
 80010da:	4b01      	ldr	r3, [pc, #4]	@ (80010e0 <HAL_RCC_OscConfig+0x5e8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	e015      	b.n	800110c <HAL_RCC_OscConfig+0x614>
 80010e0:	40021000 	.word	0x40021000
 80010e4:	2302      	movs	r3, #2
 80010e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80010ee:	fa93 f3a3 	rbit	r3, r3
 80010f2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80010f6:	2302      	movs	r3, #2
 80010f8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80010fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001100:	fa93 f3a3 	rbit	r3, r3
 8001104:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001108:	4bc8      	ldr	r3, [pc, #800]	@ (800142c <HAL_RCC_OscConfig+0x934>)
 800110a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800110c:	2202      	movs	r2, #2
 800110e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001112:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001116:	fa92 f2a2 	rbit	r2, r2
 800111a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800111e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001122:	fab2 f282 	clz	r2, r2
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	f042 0220 	orr.w	r2, r2, #32
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	f002 021f 	and.w	r2, r2, #31
 8001132:	2101      	movs	r1, #1
 8001134:	fa01 f202 	lsl.w	r2, r1, r2
 8001138:	4013      	ands	r3, r2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1ad      	bne.n	800109a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800113e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001142:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 8110 	beq.w	8001374 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001158:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d079      	beq.n	8001258 <HAL_RCC_OscConfig+0x760>
 8001164:	2301      	movs	r3, #1
 8001166:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800116e:	fa93 f3a3 	rbit	r3, r3
 8001172:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001176:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800117a:	fab3 f383 	clz	r3, r3
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	4bab      	ldr	r3, [pc, #684]	@ (8001430 <HAL_RCC_OscConfig+0x938>)
 8001184:	4413      	add	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	461a      	mov	r2, r3
 800118a:	2301      	movs	r3, #1
 800118c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118e:	f7ff fa2f 	bl	80005f0 <HAL_GetTick>
 8001192:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001196:	e00a      	b.n	80011ae <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001198:	f7ff fa2a 	bl	80005f0 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d902      	bls.n	80011ae <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	f000 bcdb 	b.w	8001b64 <HAL_RCC_OscConfig+0x106c>
 80011ae:	2302      	movs	r3, #2
 80011b0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80011b8:	fa93 f3a3 	rbit	r3, r3
 80011bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80011c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011c4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011c8:	2202      	movs	r2, #2
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011d0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	fa93 f2a3 	rbit	r2, r3
 80011da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80011ec:	2202      	movs	r2, #2
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	fa93 f2a3 	rbit	r2, r3
 80011fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001202:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001206:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001208:	4b88      	ldr	r3, [pc, #544]	@ (800142c <HAL_RCC_OscConfig+0x934>)
 800120a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800120c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001210:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001214:	2102      	movs	r1, #2
 8001216:	6019      	str	r1, [r3, #0]
 8001218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800121c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	fa93 f1a3 	rbit	r1, r3
 8001226:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800122a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800122e:	6019      	str	r1, [r3, #0]
  return result;
 8001230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001234:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	fab3 f383 	clz	r3, r3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001244:	b2db      	uxtb	r3, r3
 8001246:	f003 031f 	and.w	r3, r3, #31
 800124a:	2101      	movs	r1, #1
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	4013      	ands	r3, r2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0a0      	beq.n	8001198 <HAL_RCC_OscConfig+0x6a0>
 8001256:	e08d      	b.n	8001374 <HAL_RCC_OscConfig+0x87c>
 8001258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800125c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001260:	2201      	movs	r2, #1
 8001262:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001268:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	fa93 f2a3 	rbit	r2, r3
 8001272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001276:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800127a:	601a      	str	r2, [r3, #0]
  return result;
 800127c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001280:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001284:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001286:	fab3 f383 	clz	r3, r3
 800128a:	b2db      	uxtb	r3, r3
 800128c:	461a      	mov	r2, r3
 800128e:	4b68      	ldr	r3, [pc, #416]	@ (8001430 <HAL_RCC_OscConfig+0x938>)
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	461a      	mov	r2, r3
 8001296:	2300      	movs	r3, #0
 8001298:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129a:	f7ff f9a9 	bl	80005f0 <HAL_GetTick>
 800129e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a2:	e00a      	b.n	80012ba <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a4:	f7ff f9a4 	bl	80005f0 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d902      	bls.n	80012ba <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	f000 bc55 	b.w	8001b64 <HAL_RCC_OscConfig+0x106c>
 80012ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80012c2:	2202      	movs	r2, #2
 80012c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	fa93 f2a3 	rbit	r2, r3
 80012d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012e2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80012e6:	2202      	movs	r2, #2
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	fa93 f2a3 	rbit	r2, r3
 80012f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001306:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800130a:	2202      	movs	r2, #2
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001312:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	fa93 f2a3 	rbit	r2, r3
 800131c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001320:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001324:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001326:	4b41      	ldr	r3, [pc, #260]	@ (800142c <HAL_RCC_OscConfig+0x934>)
 8001328:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800132a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800132e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001332:	2102      	movs	r1, #2
 8001334:	6019      	str	r1, [r3, #0]
 8001336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800133a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	fa93 f1a3 	rbit	r1, r3
 8001344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001348:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800134c:	6019      	str	r1, [r3, #0]
  return result;
 800134e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001352:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	fab3 f383 	clz	r3, r3
 800135c:	b2db      	uxtb	r3, r3
 800135e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001362:	b2db      	uxtb	r3, r3
 8001364:	f003 031f 	and.w	r3, r3, #31
 8001368:	2101      	movs	r1, #1
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	4013      	ands	r3, r2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d197      	bne.n	80012a4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001374:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001378:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 81a1 	beq.w	80016cc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001390:	4b26      	ldr	r3, [pc, #152]	@ (800142c <HAL_RCC_OscConfig+0x934>)
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d116      	bne.n	80013ca <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800139c:	4b23      	ldr	r3, [pc, #140]	@ (800142c <HAL_RCC_OscConfig+0x934>)
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	4a22      	ldr	r2, [pc, #136]	@ (800142c <HAL_RCC_OscConfig+0x934>)
 80013a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a6:	61d3      	str	r3, [r2, #28]
 80013a8:	4b20      	ldr	r3, [pc, #128]	@ (800142c <HAL_RCC_OscConfig+0x934>)
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80013b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013b4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013be:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80013c2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80013c4:	2301      	movs	r3, #1
 80013c6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001434 <HAL_RCC_OscConfig+0x93c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d11a      	bne.n	800140c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013d6:	4b17      	ldr	r3, [pc, #92]	@ (8001434 <HAL_RCC_OscConfig+0x93c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a16      	ldr	r2, [pc, #88]	@ (8001434 <HAL_RCC_OscConfig+0x93c>)
 80013dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013e2:	f7ff f905 	bl	80005f0 <HAL_GetTick>
 80013e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ea:	e009      	b.n	8001400 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ec:	f7ff f900 	bl	80005f0 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b64      	cmp	r3, #100	@ 0x64
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e3b1      	b.n	8001b64 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001400:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <HAL_RCC_OscConfig+0x93c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0ef      	beq.n	80013ec <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800140c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001410:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d10d      	bne.n	8001438 <HAL_RCC_OscConfig+0x940>
 800141c:	4b03      	ldr	r3, [pc, #12]	@ (800142c <HAL_RCC_OscConfig+0x934>)
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	4a02      	ldr	r2, [pc, #8]	@ (800142c <HAL_RCC_OscConfig+0x934>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6213      	str	r3, [r2, #32]
 8001428:	e03c      	b.n	80014a4 <HAL_RCC_OscConfig+0x9ac>
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000
 8001430:	10908120 	.word	0x10908120
 8001434:	40007000 	.word	0x40007000
 8001438:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800143c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10c      	bne.n	8001462 <HAL_RCC_OscConfig+0x96a>
 8001448:	4bc1      	ldr	r3, [pc, #772]	@ (8001750 <HAL_RCC_OscConfig+0xc58>)
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	4ac0      	ldr	r2, [pc, #768]	@ (8001750 <HAL_RCC_OscConfig+0xc58>)
 800144e:	f023 0301 	bic.w	r3, r3, #1
 8001452:	6213      	str	r3, [r2, #32]
 8001454:	4bbe      	ldr	r3, [pc, #760]	@ (8001750 <HAL_RCC_OscConfig+0xc58>)
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4abd      	ldr	r2, [pc, #756]	@ (8001750 <HAL_RCC_OscConfig+0xc58>)
 800145a:	f023 0304 	bic.w	r3, r3, #4
 800145e:	6213      	str	r3, [r2, #32]
 8001460:	e020      	b.n	80014a4 <HAL_RCC_OscConfig+0x9ac>
 8001462:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001466:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	2b05      	cmp	r3, #5
 8001470:	d10c      	bne.n	800148c <HAL_RCC_OscConfig+0x994>
 8001472:	4bb7      	ldr	r3, [pc, #732]	@ (8001750 <HAL_RCC_OscConfig+0xc58>)
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	4ab6      	ldr	r2, [pc, #728]	@ (8001750 <HAL_RCC_OscConfig+0xc58>)
 8001478:	f043 0304 	orr.w	r3, r3, #4
 800147c:	6213      	str	r3, [r2, #32]
 800147e:	4bb4      	ldr	r3, [pc, #720]	@ (8001750 <HAL_RCC_OscConfig+0xc58>)
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4ab3      	ldr	r2, [pc, #716]	@ (8001750 <HAL_RCC_OscConfig+0xc58>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6213      	str	r3, [r2, #32]
 800148a:	e00b      	b.n	80014a4 <HAL_RCC_OscConfig+0x9ac>
 800148c:	4bb0      	ldr	r3, [pc, #704]	@ (8001750 <HAL_RCC_OscConfig+0xc58>)
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	4aaf      	ldr	r2, [pc, #700]	@ (8001750 <HAL_RCC_OscConfig+0xc58>)
 8001492:	f023 0301 	bic.w	r3, r3, #1
 8001496:	6213      	str	r3, [r2, #32]
 8001498:	4bad      	ldr	r3, [pc, #692]	@ (8001750 <HAL_RCC_OscConfig+0xc58>)
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	4aac      	ldr	r2, [pc, #688]	@ (8001750 <HAL_RCC_OscConfig+0xc58>)
 800149e:	f023 0304 	bic.w	r3, r3, #4
 80014a2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 8081 	beq.w	80015b8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b6:	f7ff f89b 	bl	80005f0 <HAL_GetTick>
 80014ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014be:	e00b      	b.n	80014d8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c0:	f7ff f896 	bl	80005f0 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e345      	b.n	8001b64 <HAL_RCC_OscConfig+0x106c>
 80014d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014dc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014e0:	2202      	movs	r2, #2
 80014e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	fa93 f2a3 	rbit	r2, r3
 80014f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001500:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001504:	2202      	movs	r2, #2
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800150c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	fa93 f2a3 	rbit	r2, r3
 8001516:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800151a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800151e:	601a      	str	r2, [r3, #0]
  return result;
 8001520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001524:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001528:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152a:	fab3 f383 	clz	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	095b      	lsrs	r3, r3, #5
 8001532:	b2db      	uxtb	r3, r3
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d102      	bne.n	8001544 <HAL_RCC_OscConfig+0xa4c>
 800153e:	4b84      	ldr	r3, [pc, #528]	@ (8001750 <HAL_RCC_OscConfig+0xc58>)
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	e013      	b.n	800156c <HAL_RCC_OscConfig+0xa74>
 8001544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001548:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800154c:	2202      	movs	r2, #2
 800154e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001554:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	fa93 f2a3 	rbit	r2, r3
 800155e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001562:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	4b79      	ldr	r3, [pc, #484]	@ (8001750 <HAL_RCC_OscConfig+0xc58>)
 800156a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001570:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001574:	2102      	movs	r1, #2
 8001576:	6011      	str	r1, [r2, #0]
 8001578:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800157c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	fa92 f1a2 	rbit	r1, r2
 8001586:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800158a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800158e:	6011      	str	r1, [r2, #0]
  return result;
 8001590:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001594:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001598:	6812      	ldr	r2, [r2, #0]
 800159a:	fab2 f282 	clz	r2, r2
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	f002 021f 	and.w	r2, r2, #31
 80015aa:	2101      	movs	r1, #1
 80015ac:	fa01 f202 	lsl.w	r2, r1, r2
 80015b0:	4013      	ands	r3, r2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d084      	beq.n	80014c0 <HAL_RCC_OscConfig+0x9c8>
 80015b6:	e07f      	b.n	80016b8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b8:	f7ff f81a 	bl	80005f0 <HAL_GetTick>
 80015bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c0:	e00b      	b.n	80015da <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c2:	f7ff f815 	bl	80005f0 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e2c4      	b.n	8001b64 <HAL_RCC_OscConfig+0x106c>
 80015da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015de:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80015e2:	2202      	movs	r2, #2
 80015e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ea:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	fa93 f2a3 	rbit	r2, r3
 80015f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001602:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001606:	2202      	movs	r2, #2
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800160e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	fa93 f2a3 	rbit	r2, r3
 8001618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800161c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001620:	601a      	str	r2, [r3, #0]
  return result;
 8001622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001626:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800162a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162c:	fab3 f383 	clz	r3, r3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	095b      	lsrs	r3, r3, #5
 8001634:	b2db      	uxtb	r3, r3
 8001636:	f043 0302 	orr.w	r3, r3, #2
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d102      	bne.n	8001646 <HAL_RCC_OscConfig+0xb4e>
 8001640:	4b43      	ldr	r3, [pc, #268]	@ (8001750 <HAL_RCC_OscConfig+0xc58>)
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	e013      	b.n	800166e <HAL_RCC_OscConfig+0xb76>
 8001646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800164a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800164e:	2202      	movs	r2, #2
 8001650:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001656:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	fa93 f2a3 	rbit	r2, r3
 8001660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001664:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	4b39      	ldr	r3, [pc, #228]	@ (8001750 <HAL_RCC_OscConfig+0xc58>)
 800166c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001672:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001676:	2102      	movs	r1, #2
 8001678:	6011      	str	r1, [r2, #0]
 800167a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800167e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	fa92 f1a2 	rbit	r1, r2
 8001688:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800168c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001690:	6011      	str	r1, [r2, #0]
  return result;
 8001692:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001696:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	fab2 f282 	clz	r2, r2
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	f002 021f 	and.w	r2, r2, #31
 80016ac:	2101      	movs	r1, #1
 80016ae:	fa01 f202 	lsl.w	r2, r1, r2
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d184      	bne.n	80015c2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016b8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d105      	bne.n	80016cc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c0:	4b23      	ldr	r3, [pc, #140]	@ (8001750 <HAL_RCC_OscConfig+0xc58>)
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	4a22      	ldr	r2, [pc, #136]	@ (8001750 <HAL_RCC_OscConfig+0xc58>)
 80016c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016ca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 8242 	beq.w	8001b62 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016de:	4b1c      	ldr	r3, [pc, #112]	@ (8001750 <HAL_RCC_OscConfig+0xc58>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	f000 8213 	beq.w	8001b12 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	f040 8162 	bne.w	80019c2 <HAL_RCC_OscConfig+0xeca>
 80016fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001702:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001706:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800170a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001710:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	fa93 f2a3 	rbit	r2, r3
 800171a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800171e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001722:	601a      	str	r2, [r3, #0]
  return result;
 8001724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001728:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800172c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172e:	fab3 f383 	clz	r3, r3
 8001732:	b2db      	uxtb	r3, r3
 8001734:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001738:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	461a      	mov	r2, r3
 8001740:	2300      	movs	r3, #0
 8001742:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7fe ff54 	bl	80005f0 <HAL_GetTick>
 8001748:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800174c:	e00c      	b.n	8001768 <HAL_RCC_OscConfig+0xc70>
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001754:	f7fe ff4c 	bl	80005f0 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e1fd      	b.n	8001b64 <HAL_RCC_OscConfig+0x106c>
 8001768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800176c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001770:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001774:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800177a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	fa93 f2a3 	rbit	r2, r3
 8001784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001788:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800178c:	601a      	str	r2, [r3, #0]
  return result;
 800178e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001792:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001796:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001798:	fab3 f383 	clz	r3, r3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	095b      	lsrs	r3, r3, #5
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d102      	bne.n	80017b2 <HAL_RCC_OscConfig+0xcba>
 80017ac:	4bb0      	ldr	r3, [pc, #704]	@ (8001a70 <HAL_RCC_OscConfig+0xf78>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	e027      	b.n	8001802 <HAL_RCC_OscConfig+0xd0a>
 80017b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80017ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	fa93 f2a3 	rbit	r2, r3
 80017ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017dc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80017e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ea:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	fa93 f2a3 	rbit	r2, r3
 80017f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	4b9c      	ldr	r3, [pc, #624]	@ (8001a70 <HAL_RCC_OscConfig+0xf78>)
 8001800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001802:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001806:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800180a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800180e:	6011      	str	r1, [r2, #0]
 8001810:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001814:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	fa92 f1a2 	rbit	r1, r2
 800181e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001822:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001826:	6011      	str	r1, [r2, #0]
  return result;
 8001828:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800182c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001830:	6812      	ldr	r2, [r2, #0]
 8001832:	fab2 f282 	clz	r2, r2
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	f042 0220 	orr.w	r2, r2, #32
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	f002 021f 	and.w	r2, r2, #31
 8001842:	2101      	movs	r1, #1
 8001844:	fa01 f202 	lsl.w	r2, r1, r2
 8001848:	4013      	ands	r3, r2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d182      	bne.n	8001754 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800184e:	4b88      	ldr	r3, [pc, #544]	@ (8001a70 <HAL_RCC_OscConfig+0xf78>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001856:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800185a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001866:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	430b      	orrs	r3, r1
 8001870:	497f      	ldr	r1, [pc, #508]	@ (8001a70 <HAL_RCC_OscConfig+0xf78>)
 8001872:	4313      	orrs	r3, r2
 8001874:	604b      	str	r3, [r1, #4]
 8001876:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800187a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800187e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001882:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001884:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001888:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	fa93 f2a3 	rbit	r2, r3
 8001892:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001896:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800189a:	601a      	str	r2, [r3, #0]
  return result;
 800189c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80018a4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a6:	fab3 f383 	clz	r3, r3
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018b0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	461a      	mov	r2, r3
 80018b8:	2301      	movs	r3, #1
 80018ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018bc:	f7fe fe98 	bl	80005f0 <HAL_GetTick>
 80018c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018c4:	e009      	b.n	80018da <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c6:	f7fe fe93 	bl	80005f0 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e144      	b.n	8001b64 <HAL_RCC_OscConfig+0x106c>
 80018da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018de:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80018e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ec:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	fa93 f2a3 	rbit	r2, r3
 80018f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018fa:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80018fe:	601a      	str	r2, [r3, #0]
  return result;
 8001900:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001904:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001908:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800190a:	fab3 f383 	clz	r3, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	095b      	lsrs	r3, r3, #5
 8001912:	b2db      	uxtb	r3, r3
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b01      	cmp	r3, #1
 800191c:	d102      	bne.n	8001924 <HAL_RCC_OscConfig+0xe2c>
 800191e:	4b54      	ldr	r3, [pc, #336]	@ (8001a70 <HAL_RCC_OscConfig+0xf78>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	e027      	b.n	8001974 <HAL_RCC_OscConfig+0xe7c>
 8001924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001928:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800192c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001930:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001936:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	fa93 f2a3 	rbit	r2, r3
 8001940:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001944:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800194e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001952:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800195c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	fa93 f2a3 	rbit	r2, r3
 8001966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800196a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	4b3f      	ldr	r3, [pc, #252]	@ (8001a70 <HAL_RCC_OscConfig+0xf78>)
 8001972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001974:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001978:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800197c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001980:	6011      	str	r1, [r2, #0]
 8001982:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001986:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	fa92 f1a2 	rbit	r1, r2
 8001990:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001994:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001998:	6011      	str	r1, [r2, #0]
  return result;
 800199a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800199e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80019a2:	6812      	ldr	r2, [r2, #0]
 80019a4:	fab2 f282 	clz	r2, r2
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	f042 0220 	orr.w	r2, r2, #32
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	f002 021f 	and.w	r2, r2, #31
 80019b4:	2101      	movs	r1, #1
 80019b6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d082      	beq.n	80018c6 <HAL_RCC_OscConfig+0xdce>
 80019c0:	e0cf      	b.n	8001b62 <HAL_RCC_OscConfig+0x106a>
 80019c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80019ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	fa93 f2a3 	rbit	r2, r3
 80019de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80019e6:	601a      	str	r2, [r3, #0]
  return result;
 80019e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ec:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80019f0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f2:	fab3 f383 	clz	r3, r3
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019fc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	461a      	mov	r2, r3
 8001a04:	2300      	movs	r3, #0
 8001a06:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7fe fdf2 	bl	80005f0 <HAL_GetTick>
 8001a0c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a10:	e009      	b.n	8001a26 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a12:	f7fe fded 	bl	80005f0 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e09e      	b.n	8001b64 <HAL_RCC_OscConfig+0x106c>
 8001a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a2a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001a2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a38:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	fa93 f2a3 	rbit	r2, r3
 8001a42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a46:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001a4a:	601a      	str	r2, [r3, #0]
  return result;
 8001a4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a50:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001a54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a56:	fab3 f383 	clz	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	095b      	lsrs	r3, r3, #5
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d104      	bne.n	8001a74 <HAL_RCC_OscConfig+0xf7c>
 8001a6a:	4b01      	ldr	r3, [pc, #4]	@ (8001a70 <HAL_RCC_OscConfig+0xf78>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	e029      	b.n	8001ac4 <HAL_RCC_OscConfig+0xfcc>
 8001a70:	40021000 	.word	0x40021000
 8001a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a78:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001a7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a86:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	fa93 f2a3 	rbit	r2, r3
 8001a90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a94:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a9e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001aa2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aac:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	fa93 f2a3 	rbit	r2, r3
 8001ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aba:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8001b70 <HAL_RCC_OscConfig+0x1078>)
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ac8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001acc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ad0:	6011      	str	r1, [r2, #0]
 8001ad2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ad6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	fa92 f1a2 	rbit	r1, r2
 8001ae0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ae4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001ae8:	6011      	str	r1, [r2, #0]
  return result;
 8001aea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001aee:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	fab2 f282 	clz	r2, r2
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	f042 0220 	orr.w	r2, r2, #32
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	f002 021f 	and.w	r2, r2, #31
 8001b04:	2101      	movs	r1, #1
 8001b06:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d180      	bne.n	8001a12 <HAL_RCC_OscConfig+0xf1a>
 8001b10:	e027      	b.n	8001b62 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e01e      	b.n	8001b64 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b26:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <HAL_RCC_OscConfig+0x1078>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b2e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001b32:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d10b      	bne.n	8001b5e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001b46:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001b4a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d001      	beq.n	8001b62 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000

08001b74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b09e      	sub	sp, #120	@ 0x78
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e162      	b.n	8001e52 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b90      	ldr	r3, [pc, #576]	@ (8001dd0 <HAL_RCC_ClockConfig+0x25c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d910      	bls.n	8001bbc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b8d      	ldr	r3, [pc, #564]	@ (8001dd0 <HAL_RCC_ClockConfig+0x25c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 0207 	bic.w	r2, r3, #7
 8001ba2:	498b      	ldr	r1, [pc, #556]	@ (8001dd0 <HAL_RCC_ClockConfig+0x25c>)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b89      	ldr	r3, [pc, #548]	@ (8001dd0 <HAL_RCC_ClockConfig+0x25c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e14a      	b.n	8001e52 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc8:	4b82      	ldr	r3, [pc, #520]	@ (8001dd4 <HAL_RCC_ClockConfig+0x260>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	497f      	ldr	r1, [pc, #508]	@ (8001dd4 <HAL_RCC_ClockConfig+0x260>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 80dc 	beq.w	8001da0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d13c      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xf6>
 8001bf0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bf4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001bf8:	fa93 f3a3 	rbit	r3, r3
 8001bfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001bfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c00:	fab3 f383 	clz	r3, r3
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d102      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xa6>
 8001c14:	4b6f      	ldr	r3, [pc, #444]	@ (8001dd4 <HAL_RCC_ClockConfig+0x260>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	e00f      	b.n	8001c3a <HAL_RCC_ClockConfig+0xc6>
 8001c1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c1e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c22:	fa93 f3a3 	rbit	r3, r3
 8001c26:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c36:	4b67      	ldr	r3, [pc, #412]	@ (8001dd4 <HAL_RCC_ClockConfig+0x260>)
 8001c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c3e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001c40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001c42:	fa92 f2a2 	rbit	r2, r2
 8001c46:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001c48:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001c4a:	fab2 f282 	clz	r2, r2
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	f042 0220 	orr.w	r2, r2, #32
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	f002 021f 	and.w	r2, r2, #31
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d17b      	bne.n	8001d5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0f3      	b.n	8001e52 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d13c      	bne.n	8001cec <HAL_RCC_ClockConfig+0x178>
 8001c72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c76:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001c80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c82:	fab3 f383 	clz	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	095b      	lsrs	r3, r3, #5
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d102      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x128>
 8001c96:	4b4f      	ldr	r3, [pc, #316]	@ (8001dd4 <HAL_RCC_ClockConfig+0x260>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	e00f      	b.n	8001cbc <HAL_RCC_ClockConfig+0x148>
 8001c9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ca4:	fa93 f3a3 	rbit	r3, r3
 8001ca8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001caa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cae:	643b      	str	r3, [r7, #64]	@ 0x40
 8001cb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cb8:	4b46      	ldr	r3, [pc, #280]	@ (8001dd4 <HAL_RCC_ClockConfig+0x260>)
 8001cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cc0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001cc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001cc4:	fa92 f2a2 	rbit	r2, r2
 8001cc8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001cca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ccc:	fab2 f282 	clz	r2, r2
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	f042 0220 	orr.w	r2, r2, #32
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	f002 021f 	and.w	r2, r2, #31
 8001cdc:	2101      	movs	r1, #1
 8001cde:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d13a      	bne.n	8001d5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0b2      	b.n	8001e52 <HAL_RCC_ClockConfig+0x2de>
 8001cec:	2302      	movs	r3, #2
 8001cee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	095b      	lsrs	r3, r3, #5
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d102      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x1a0>
 8001d0e:	4b31      	ldr	r3, [pc, #196]	@ (8001dd4 <HAL_RCC_ClockConfig+0x260>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	e00d      	b.n	8001d30 <HAL_RCC_ClockConfig+0x1bc>
 8001d14:	2302      	movs	r3, #2
 8001d16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d20:	2302      	movs	r3, #2
 8001d22:	623b      	str	r3, [r7, #32]
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	61fb      	str	r3, [r7, #28]
 8001d2c:	4b29      	ldr	r3, [pc, #164]	@ (8001dd4 <HAL_RCC_ClockConfig+0x260>)
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d30:	2202      	movs	r2, #2
 8001d32:	61ba      	str	r2, [r7, #24]
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	fa92 f2a2 	rbit	r2, r2
 8001d3a:	617a      	str	r2, [r7, #20]
  return result;
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	fab2 f282 	clz	r2, r2
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	f042 0220 	orr.w	r2, r2, #32
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	f002 021f 	and.w	r2, r2, #31
 8001d4e:	2101      	movs	r1, #1
 8001d50:	fa01 f202 	lsl.w	r2, r1, r2
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e079      	b.n	8001e52 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <HAL_RCC_ClockConfig+0x260>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f023 0203 	bic.w	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	491a      	ldr	r1, [pc, #104]	@ (8001dd4 <HAL_RCC_ClockConfig+0x260>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d70:	f7fe fc3e 	bl	80005f0 <HAL_GetTick>
 8001d74:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d76:	e00a      	b.n	8001d8e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d78:	f7fe fc3a 	bl	80005f0 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e061      	b.n	8001e52 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8e:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <HAL_RCC_ClockConfig+0x260>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 020c 	and.w	r2, r3, #12
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d1eb      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da0:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <HAL_RCC_ClockConfig+0x25c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d214      	bcs.n	8001dd8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <HAL_RCC_ClockConfig+0x25c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 0207 	bic.w	r2, r3, #7
 8001db6:	4906      	ldr	r1, [pc, #24]	@ (8001dd0 <HAL_RCC_ClockConfig+0x25c>)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbe:	4b04      	ldr	r3, [pc, #16]	@ (8001dd0 <HAL_RCC_ClockConfig+0x25c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d005      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e040      	b.n	8001e52 <HAL_RCC_ClockConfig+0x2de>
 8001dd0:	40022000 	.word	0x40022000
 8001dd4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e5c <HAL_RCC_ClockConfig+0x2e8>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	491a      	ldr	r1, [pc, #104]	@ (8001e5c <HAL_RCC_ClockConfig+0x2e8>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d009      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e02:	4b16      	ldr	r3, [pc, #88]	@ (8001e5c <HAL_RCC_ClockConfig+0x2e8>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4912      	ldr	r1, [pc, #72]	@ (8001e5c <HAL_RCC_ClockConfig+0x2e8>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e16:	f000 f829 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 8001e1a:	4601      	mov	r1, r0
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <HAL_RCC_ClockConfig+0x2e8>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e24:	22f0      	movs	r2, #240	@ 0xf0
 8001e26:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	fa92 f2a2 	rbit	r2, r2
 8001e2e:	60fa      	str	r2, [r7, #12]
  return result;
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	fab2 f282 	clz	r2, r2
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	40d3      	lsrs	r3, r2
 8001e3a:	4a09      	ldr	r2, [pc, #36]	@ (8001e60 <HAL_RCC_ClockConfig+0x2ec>)
 8001e3c:	5cd3      	ldrb	r3, [r2, r3]
 8001e3e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e42:	4a08      	ldr	r2, [pc, #32]	@ (8001e64 <HAL_RCC_ClockConfig+0x2f0>)
 8001e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e46:	4b08      	ldr	r3, [pc, #32]	@ (8001e68 <HAL_RCC_ClockConfig+0x2f4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb8c 	bl	8000568 <HAL_InitTick>
  
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3778      	adds	r7, #120	@ 0x78
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	08002814 	.word	0x08002814
 8001e64:	20000000 	.word	0x20000000
 8001e68:	20000004 	.word	0x20000004

08001e6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b08b      	sub	sp, #44	@ 0x2c
 8001e70:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001e86:	4b29      	ldr	r3, [pc, #164]	@ (8001f2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d002      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x30>
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d003      	beq.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x36>
 8001e9a:	e03c      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e9c:	4b24      	ldr	r3, [pc, #144]	@ (8001f30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e9e:	623b      	str	r3, [r7, #32]
      break;
 8001ea0:	e03c      	b.n	8001f1c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001ea8:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8001eac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	fa92 f2a2 	rbit	r2, r2
 8001eb4:	607a      	str	r2, [r7, #4]
  return result;
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	fab2 f282 	clz	r2, r2
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	40d3      	lsrs	r3, r2
 8001ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f34 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ec2:	5cd3      	ldrb	r3, [r2, r3]
 8001ec4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001ec6:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	220f      	movs	r2, #15
 8001ed0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	fa92 f2a2 	rbit	r2, r2
 8001ed8:	60fa      	str	r2, [r7, #12]
  return result;
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	fab2 f282 	clz	r2, r2
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	40d3      	lsrs	r3, r2
 8001ee4:	4a14      	ldr	r2, [pc, #80]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001ee6:	5cd3      	ldrb	r3, [r2, r3]
 8001ee8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d008      	beq.n	8001f06 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ef4:	4a0e      	ldr	r2, [pc, #56]	@ (8001f30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fb02 f303 	mul.w	r3, r2, r3
 8001f02:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f04:	e004      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	4a0c      	ldr	r2, [pc, #48]	@ (8001f3c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f0a:	fb02 f303 	mul.w	r3, r2, r3
 8001f0e:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f12:	623b      	str	r3, [r7, #32]
      break;
 8001f14:	e002      	b.n	8001f1c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f16:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f18:	623b      	str	r3, [r7, #32]
      break;
 8001f1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	372c      	adds	r7, #44	@ 0x2c
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	007a1200 	.word	0x007a1200
 8001f34:	08002824 	.word	0x08002824
 8001f38:	08002834 	.word	0x08002834
 8001f3c:	003d0900 	.word	0x003d0900

08001f40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e09d      	b.n	800208e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d108      	bne.n	8001f6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f62:	d009      	beq.n	8001f78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
 8001f6a:	e005      	b.n	8001f78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7fe fa22 	bl	80003dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001fb8:	d902      	bls.n	8001fc0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	e002      	b.n	8001fc6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001fc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fc4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001fce:	d007      	beq.n	8001fe0 <HAL_SPI_Init+0xa0>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001fd8:	d002      	beq.n	8001fe0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002022:	ea42 0103 	orr.w	r1, r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	f003 0204 	and.w	r2, r3, #4
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800205c:	ea42 0103 	orr.w	r1, r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	69da      	ldr	r2, [r3, #28]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800207c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b08a      	sub	sp, #40	@ 0x28
 800209a:	af00      	add	r7, sp, #0
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
 80020a2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80020a4:	2301      	movs	r3, #1
 80020a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_SPI_TransmitReceive+0x26>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e20a      	b.n	80024d2 <HAL_SPI_TransmitReceive+0x43c>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020c4:	f7fe fa94 	bl	80005f0 <HAL_GetTick>
 80020c8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80020d0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80020d8:	887b      	ldrh	r3, [r7, #2]
 80020da:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80020dc:	887b      	ldrh	r3, [r7, #2]
 80020de:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80020e0:	7efb      	ldrb	r3, [r7, #27]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d00e      	beq.n	8002104 <HAL_SPI_TransmitReceive+0x6e>
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020ec:	d106      	bne.n	80020fc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <HAL_SPI_TransmitReceive+0x66>
 80020f6:	7efb      	ldrb	r3, [r7, #27]
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d003      	beq.n	8002104 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80020fc:	2302      	movs	r3, #2
 80020fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002102:	e1e0      	b.n	80024c6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_SPI_TransmitReceive+0x80>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d002      	beq.n	8002116 <HAL_SPI_TransmitReceive+0x80>
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d103      	bne.n	800211e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800211c:	e1d3      	b.n	80024c6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b04      	cmp	r3, #4
 8002128:	d003      	beq.n	8002132 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2205      	movs	r2, #5
 800212e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	887a      	ldrh	r2, [r7, #2]
 8002142:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	887a      	ldrh	r2, [r7, #2]
 800214a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	887a      	ldrh	r2, [r7, #2]
 8002158:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	887a      	ldrh	r2, [r7, #2]
 800215e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002174:	d802      	bhi.n	800217c <HAL_SPI_TransmitReceive+0xe6>
 8002176:	8a3b      	ldrh	r3, [r7, #16]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d908      	bls.n	800218e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	e007      	b.n	800219e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800219c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021a8:	2b40      	cmp	r3, #64	@ 0x40
 80021aa:	d007      	beq.n	80021bc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80021c4:	f240 8081 	bls.w	80022ca <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <HAL_SPI_TransmitReceive+0x140>
 80021d0:	8a7b      	ldrh	r3, [r7, #18]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d16d      	bne.n	80022b2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021da:	881a      	ldrh	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e6:	1c9a      	adds	r2, r3, #2
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	3b01      	subs	r3, #1
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021fa:	e05a      	b.n	80022b2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b02      	cmp	r3, #2
 8002208:	d11b      	bne.n	8002242 <HAL_SPI_TransmitReceive+0x1ac>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800220e:	b29b      	uxth	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d016      	beq.n	8002242 <HAL_SPI_TransmitReceive+0x1ac>
 8002214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002216:	2b01      	cmp	r3, #1
 8002218:	d113      	bne.n	8002242 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800221e:	881a      	ldrh	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800222a:	1c9a      	adds	r2, r3, #2
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002234:	b29b      	uxth	r3, r3
 8002236:	3b01      	subs	r3, #1
 8002238:	b29a      	uxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800223e:	2300      	movs	r3, #0
 8002240:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b01      	cmp	r3, #1
 800224e:	d11c      	bne.n	800228a <HAL_SPI_TransmitReceive+0x1f4>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002256:	b29b      	uxth	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d016      	beq.n	800228a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	b292      	uxth	r2, r2
 8002268:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	1c9a      	adds	r2, r3, #2
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002286:	2301      	movs	r3, #1
 8002288:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800228a:	f7fe f9b1 	bl	80005f0 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002296:	429a      	cmp	r2, r3
 8002298:	d80b      	bhi.n	80022b2 <HAL_SPI_TransmitReceive+0x21c>
 800229a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022a0:	d007      	beq.n	80022b2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80022b0:	e109      	b.n	80024c6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d19f      	bne.n	80021fc <HAL_SPI_TransmitReceive+0x166>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d199      	bne.n	80021fc <HAL_SPI_TransmitReceive+0x166>
 80022c8:	e0e3      	b.n	8002492 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_SPI_TransmitReceive+0x244>
 80022d2:	8a7b      	ldrh	r3, [r7, #18]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	f040 80cf 	bne.w	8002478 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022de:	b29b      	uxth	r3, r3
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d912      	bls.n	800230a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e8:	881a      	ldrh	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f4:	1c9a      	adds	r2, r3, #2
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3b02      	subs	r3, #2
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002308:	e0b6      	b.n	8002478 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	330c      	adds	r3, #12
 8002314:	7812      	ldrb	r2, [r2, #0]
 8002316:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002326:	b29b      	uxth	r3, r3
 8002328:	3b01      	subs	r3, #1
 800232a:	b29a      	uxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002330:	e0a2      	b.n	8002478 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b02      	cmp	r3, #2
 800233e:	d134      	bne.n	80023aa <HAL_SPI_TransmitReceive+0x314>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002344:	b29b      	uxth	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d02f      	beq.n	80023aa <HAL_SPI_TransmitReceive+0x314>
 800234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234c:	2b01      	cmp	r3, #1
 800234e:	d12c      	bne.n	80023aa <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d912      	bls.n	8002380 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800235e:	881a      	ldrh	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800236a:	1c9a      	adds	r2, r3, #2
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002374:	b29b      	uxth	r3, r3
 8002376:	3b02      	subs	r3, #2
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800237e:	e012      	b.n	80023a6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	330c      	adds	r3, #12
 800238a:	7812      	ldrb	r2, [r2, #0]
 800238c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800239c:	b29b      	uxth	r3, r3
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d148      	bne.n	800244a <HAL_SPI_TransmitReceive+0x3b4>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80023be:	b29b      	uxth	r3, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d042      	beq.n	800244a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d923      	bls.n	8002418 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	b292      	uxth	r2, r2
 80023dc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	1c9a      	adds	r2, r3, #2
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3b02      	subs	r3, #2
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002400:	b29b      	uxth	r3, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d81f      	bhi.n	8002446 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	e016      	b.n	8002446 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f103 020c 	add.w	r2, r3, #12
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002424:	7812      	ldrb	r2, [r2, #0]
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002446:	2301      	movs	r3, #1
 8002448:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800244a:	f7fe f8d1 	bl	80005f0 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002456:	429a      	cmp	r2, r3
 8002458:	d803      	bhi.n	8002462 <HAL_SPI_TransmitReceive+0x3cc>
 800245a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002460:	d102      	bne.n	8002468 <HAL_SPI_TransmitReceive+0x3d2>
 8002462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002464:	2b00      	cmp	r3, #0
 8002466:	d107      	bne.n	8002478 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002476:	e026      	b.n	80024c6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800247c:	b29b      	uxth	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	f47f af57 	bne.w	8002332 <HAL_SPI_TransmitReceive+0x29c>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	f47f af50 	bne.w	8002332 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 f93e 	bl	8002718 <SPI_EndRxTxTransaction>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80024bc:	e003      	b.n	80024c6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80024ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3728      	adds	r7, #40	@ 0x28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	4613      	mov	r3, r2
 80024ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024ec:	f7fe f880 	bl	80005f0 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	4413      	add	r3, r2
 80024fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024fc:	f7fe f878 	bl	80005f0 <HAL_GetTick>
 8002500:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002502:	4b39      	ldr	r3, [pc, #228]	@ (80025e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	015b      	lsls	r3, r3, #5
 8002508:	0d1b      	lsrs	r3, r3, #20
 800250a:	69fa      	ldr	r2, [r7, #28]
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002512:	e054      	b.n	80025be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800251a:	d050      	beq.n	80025be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800251c:	f7fe f868 	bl	80005f0 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	429a      	cmp	r2, r3
 800252a:	d902      	bls.n	8002532 <SPI_WaitFlagStateUntilTimeout+0x56>
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d13d      	bne.n	80025ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002540:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800254a:	d111      	bne.n	8002570 <SPI_WaitFlagStateUntilTimeout+0x94>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002554:	d004      	beq.n	8002560 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800255e:	d107      	bne.n	8002570 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800256e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002574:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002578:	d10f      	bne.n	800259a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002598:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e017      	b.n	80025de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4013      	ands	r3, r2
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	bf0c      	ite	eq
 80025ce:	2301      	moveq	r3, #1
 80025d0:	2300      	movne	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d19b      	bne.n	8002514 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3720      	adds	r7, #32
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000000 	.word	0x20000000

080025ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08a      	sub	sp, #40	@ 0x28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80025fe:	f7fd fff7 	bl	80005f0 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	4413      	add	r3, r2
 800260c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800260e:	f7fd ffef 	bl	80005f0 <HAL_GetTick>
 8002612:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	330c      	adds	r3, #12
 800261a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800261c:	4b3d      	ldr	r3, [pc, #244]	@ (8002714 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	00da      	lsls	r2, r3, #3
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	0d1b      	lsrs	r3, r3, #20
 800262c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800262e:	fb02 f303 	mul.w	r3, r2, r3
 8002632:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002634:	e060      	b.n	80026f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800263c:	d107      	bne.n	800264e <SPI_WaitFifoStateUntilTimeout+0x62>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d104      	bne.n	800264e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800264c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002654:	d050      	beq.n	80026f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002656:	f7fd ffcb 	bl	80005f0 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002662:	429a      	cmp	r2, r3
 8002664:	d902      	bls.n	800266c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002668:	2b00      	cmp	r3, #0
 800266a:	d13d      	bne.n	80026e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800267a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002684:	d111      	bne.n	80026aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800268e:	d004      	beq.n	800269a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002698:	d107      	bne.n	80026aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026b2:	d10f      	bne.n	80026d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e010      	b.n	800270a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4013      	ands	r3, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	429a      	cmp	r2, r3
 8002706:	d196      	bne.n	8002636 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3728      	adds	r7, #40	@ 0x28
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000000 	.word	0x20000000

08002718 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af02      	add	r7, sp, #8
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2200      	movs	r2, #0
 800272c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7ff ff5b 	bl	80025ec <SPI_WaitFifoStateUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d007      	beq.n	800274c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002740:	f043 0220 	orr.w	r2, r3, #32
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e027      	b.n	800279c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2200      	movs	r2, #0
 8002754:	2180      	movs	r1, #128	@ 0x80
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff fec0 	bl	80024dc <SPI_WaitFlagStateUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d007      	beq.n	8002772 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002766:	f043 0220 	orr.w	r2, r3, #32
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e014      	b.n	800279c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2200      	movs	r2, #0
 800277a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f7ff ff34 	bl	80025ec <SPI_WaitFifoStateUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d007      	beq.n	800279a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800278e:	f043 0220 	orr.w	r2, r3, #32
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e000      	b.n	800279c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <memset>:
 80027a4:	4402      	add	r2, r0
 80027a6:	4603      	mov	r3, r0
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d100      	bne.n	80027ae <memset+0xa>
 80027ac:	4770      	bx	lr
 80027ae:	f803 1b01 	strb.w	r1, [r3], #1
 80027b2:	e7f9      	b.n	80027a8 <memset+0x4>

080027b4 <__libc_init_array>:
 80027b4:	b570      	push	{r4, r5, r6, lr}
 80027b6:	4d0d      	ldr	r5, [pc, #52]	@ (80027ec <__libc_init_array+0x38>)
 80027b8:	4c0d      	ldr	r4, [pc, #52]	@ (80027f0 <__libc_init_array+0x3c>)
 80027ba:	1b64      	subs	r4, r4, r5
 80027bc:	10a4      	asrs	r4, r4, #2
 80027be:	2600      	movs	r6, #0
 80027c0:	42a6      	cmp	r6, r4
 80027c2:	d109      	bne.n	80027d8 <__libc_init_array+0x24>
 80027c4:	4d0b      	ldr	r5, [pc, #44]	@ (80027f4 <__libc_init_array+0x40>)
 80027c6:	4c0c      	ldr	r4, [pc, #48]	@ (80027f8 <__libc_init_array+0x44>)
 80027c8:	f000 f818 	bl	80027fc <_init>
 80027cc:	1b64      	subs	r4, r4, r5
 80027ce:	10a4      	asrs	r4, r4, #2
 80027d0:	2600      	movs	r6, #0
 80027d2:	42a6      	cmp	r6, r4
 80027d4:	d105      	bne.n	80027e2 <__libc_init_array+0x2e>
 80027d6:	bd70      	pop	{r4, r5, r6, pc}
 80027d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80027dc:	4798      	blx	r3
 80027de:	3601      	adds	r6, #1
 80027e0:	e7ee      	b.n	80027c0 <__libc_init_array+0xc>
 80027e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e6:	4798      	blx	r3
 80027e8:	3601      	adds	r6, #1
 80027ea:	e7f2      	b.n	80027d2 <__libc_init_array+0x1e>
 80027ec:	08002844 	.word	0x08002844
 80027f0:	08002844 	.word	0x08002844
 80027f4:	08002844 	.word	0x08002844
 80027f8:	08002848 	.word	0x08002848

080027fc <_init>:
 80027fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027fe:	bf00      	nop
 8002800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002802:	bc08      	pop	{r3}
 8002804:	469e      	mov	lr, r3
 8002806:	4770      	bx	lr

08002808 <_fini>:
 8002808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280a:	bf00      	nop
 800280c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800280e:	bc08      	pop	{r3}
 8002810:	469e      	mov	lr, r3
 8002812:	4770      	bx	lr
